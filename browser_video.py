"""
Module x·ª≠ l√Ω vi·ªác ƒëi·ªÅu khi·ªÉn tr√¨nh duy·ªát t·ª± ƒë·ªông ƒë·ªÉ sinh video t·ª´ Freepik AI.
"""

import os
import time
import json
import shutil
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime

from dotenv import load_dotenv
from playwright.sync_api import sync_playwright, Page, Browser


class FreepikVideoGenerator:
    """L·ªõp x·ª≠ l√Ω vi·ªác ƒëi·ªÅu khi·ªÉn tr√¨nh duy·ªát ƒë·ªÉ sinh video t·ª´ Freepik AI."""

    def __init__(self, headless: bool = True, output_dir: str = "output"):
        """
        Kh·ªüi t·∫°o tr√¨nh ƒëi·ªÅu khi·ªÉn browser.
        
        Args:
            headless: True ƒë·ªÉ ch·∫°y ·∫©n browser, False ƒë·ªÉ hi·ªÉn th·ªã UI
            output_dir: Th∆∞ m·ª•c l∆∞u video ƒë·∫ßu ra
        """
        self.headless = headless
        self.base_output_dir = output_dir
        self.current_session_dir = None
        
        # T·∫°o th∆∞ m·ª•c output ch√≠nh n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(self.base_output_dir, exist_ok=True)
    
    def _create_session_folder(self, session_type: str = "video") -> str:
        """
        T·∫°o folder cho session hi·ªán t·∫°i v·ªõi timestamp
        
        Args:
            session_type: Lo·∫°i session (video, image_to_video, etc.)
            
        Returns:
            str: ƒê∆∞·ªùng d·∫´n t·ªõi session folder
        """
        # T·∫°o timestamp cho session
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        session_name = f"{session_type}_{timestamp}"
        
        # T·∫°o ƒë∆∞·ªùng d·∫´n session folder
        session_dir = os.path.join(self.base_output_dir, session_name)
        os.makedirs(session_dir, exist_ok=True)
        
        # L∆∞u session hi·ªán t·∫°i
        self.current_session_dir = session_dir
        
        print(f"üìÅ T·∫°o session folder: {session_name}")
        return session_dir
    
    def _save_session_metadata(self, metadata: dict):
        """
        L∆∞u metadata c·ªßa session v√†o file JSON
        
        Args:
            metadata: Dictionary ch·ª©a th√¥ng tin session
        """
        if not self.current_session_dir:
            return
            
        metadata_path = os.path.join(self.current_session_dir, "session_info.json")
        metadata["session_created"] = datetime.now().isoformat()
        metadata["session_folder"] = os.path.basename(self.current_session_dir)
        
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        print(f"üìã L∆∞u session metadata: session_info.json")
    
    def _copy_input_file(self, source_path: str, new_name: str = None) -> str:
        """
        Copy file input v√†o session folder
        
        Args:
            source_path: ƒê∆∞·ªùng d·∫´n file g·ªëc
            new_name: T√™n m·ªõi cho file (optional)
            
        Returns:
            str: ƒê∆∞·ªùng d·∫´n file ƒë√£ copy
        """
        if not self.current_session_dir or not os.path.exists(source_path):
            return source_path
        
        source_file = Path(source_path)
        if new_name:
            dest_name = new_name
        else:
            dest_name = f"input_{source_file.name}"
        
        dest_path = os.path.join(self.current_session_dir, dest_name)
        shutil.copy2(source_path, dest_path)
        
        print(f"üìé Copy input file: {dest_name}")
        return dest_path
    
    def get_session_summary(self) -> dict:
        """
        L·∫•y th·ªëng k√™ c√°c session ƒë√£ t·∫°o
        
        Returns:
            dict: Th·ªëng k√™ sessions
        """
        if not os.path.exists(self.base_output_dir):
            return {"total_sessions": 0, "sessions": []}
        
        sessions = []
        for item in os.listdir(self.base_output_dir):
            item_path = os.path.join(self.base_output_dir, item)
            if os.path.isdir(item_path) and ("video_" in item or "image_to_video_" in item or "text_to_video_" in item):
                session_info = {"folder_name": item, "path": item_path}
                
                # ƒê·ªçc metadata n·∫øu c√≥
                metadata_path = os.path.join(item_path, "session_info.json")
                if os.path.exists(metadata_path):
                    try:
                        with open(metadata_path, 'r', encoding='utf-8') as f:
                            metadata = json.load(f)
                        session_info.update(metadata)
                    except:
                        pass
                
                # Th√™m th√¥ng tin files
                files = os.listdir(item_path)
                session_info["files"] = files
                session_info["file_count"] = len(files)
                
                sessions.append(session_info)
        
        # S·∫Øp x·∫øp theo th·ªùi gian t·∫°o (m·ªõi nh·∫•t tr∆∞·ªõc)
        sessions.sort(key=lambda x: x.get("session_created", ""), reverse=True)
        
        return {
            "total_sessions": len(sessions),
            "sessions": sessions[:10],  # Ch·ªâ l·∫•y 10 sessions g·∫ßn nh·∫•t
            "base_output_dir": self.base_output_dir
        }
    
    def print_session_summary(self):
        """In ra th·ªëng k√™ sessions ƒë√£ t·∫°o"""
        summary = self.get_session_summary()
        
        print(f"\nüìä TH·ªêNG K√ä VIDEO SESSIONS")
        print(f"üìÅ Th∆∞ m·ª•c g·ªëc: {summary['base_output_dir']}")
        print(f"üé¨ T·ªïng sessions: {summary['total_sessions']}")
        
        if summary['sessions']:
            print(f"\nüìã {min(10, len(summary['sessions']))} Sessions g·∫ßn nh·∫•t:")
            for i, session in enumerate(summary['sessions'], 1):
                status = session.get('status', 'unknown')
                session_type = session.get('type', 'unknown')
                created = session.get('session_created', 'unknown')
                
                status_icon = "‚úÖ" if status == "completed" else "‚ùå" if status == "error" else "‚ö†Ô∏è"
                
                print(f"  {i}. {status_icon} {session['folder_name']}")
                print(f"     üìÖ {created[:19] if created != 'unknown' else 'Unknown'}")
                print(f"     üé≠ Type: {session_type}")
                print(f"     üìÅ Files: {session.get('file_count', 0)}")
                if 'prompt' in session:
                    prompt_short = session['prompt'][:50] + "..." if len(session['prompt']) > 50 else session['prompt']
                    print(f"     üí¨ Prompt: {prompt_short}")
        else:
            print("Ch∆∞a c√≥ session n√†o.")
    
    def _download_video_to_session(self, page = None) -> Optional[str]:
        """
        Download video v√†o session folder hi·ªán t·∫°i
        
        Args:
            page: Playwright page object (s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ context n·∫øu kh√¥ng c√≥)
            
        Returns:
            str: ƒê∆∞·ªùng d·∫´n file video ƒë√£ download
        """
        if not self.current_session_dir:
            print("‚ùå Kh√¥ng c√≥ session folder ƒë·ªÉ l∆∞u video")
            return None
        
        # T·∫°o t√™n file video v·ªõi timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"video_output_{timestamp}.mp4"
        filepath = os.path.join(self.current_session_dir, filename)
        
        # Note: Method n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi t·ª´ context c√≥ page
        # Logic download s·∫Ω ƒë∆∞·ª£c th√™m v√†o trong context generate_video_from_image
        return filepath
    
    def parse_cookies(self, cookie_input: str):
        """
        Parse cookie t·ª´ nhi·ªÅu ƒë·ªãnh d·∫°ng kh√°c nhau
        
        Args:
            cookie_input: Cookie d∆∞·ªõi d·∫°ng string ho·∫∑c JSON
            
        Returns:
            list: Danh s√°ch cookie ƒë√£ ƒë∆∞·ª£c parse
        """
        try:
            # Th·ª≠ parse JSON tr∆∞·ªõc
            if cookie_input.strip().startswith('['):
                cookies_json = json.loads(cookie_input)
                
                # L·ªçc c√°c cookie quan tr·ªçng cho Freepik
                important_cookies = []
                important_names = [
                    'GR_TOKEN',      # Token x√°c th·ª±c ch√≠nh
                    'GR_REFRESH',    # Refresh token
                    'GRID',          # User ID
                    'UID',           # User ID backup
                    '_ga',           # Google Analytics
                    '_ga_QWX66025LC',# Google Analytics specific
                    'OptanonConsent',# Cookie consent
                    'ab.storage.userId.8086d9ee-1f81-4508-ba9f-3a661635ac90',  # User session
                    'ph_phc_Rc6y1yvZwwwR09Pl9NtKBo5gzpxr1Ei4Bdbg3kC1Ihz_posthog'  # Analytics
                ]
                
                for cookie in cookies_json:
                    if cookie['name'] in important_names:
                        important_cookies.append({
                            'name': cookie['name'],
                            'value': cookie['value'],
                            'domain': cookie['domain'],
                            'path': cookie.get('path', '/'),
                            'secure': cookie.get('secure', False),
                            'httpOnly': cookie.get('httpOnly', False)
                        })
                
                print(f"‚úì ƒê√£ parse {len(important_cookies)} cookie quan tr·ªçng t·ª´ {len(cookies_json)} cookie")
                return important_cookies
                
            else:
                # Parse cookie string d·∫°ng "name=value; name2=value2"
                cookies = []
                cookie_pairs = cookie_input.split(';')
                
                for pair in cookie_pairs:
                    if '=' in pair:
                        name, value = pair.strip().split('=', 1)
                        cookies.append({
                            'name': name.strip(),
                            'value': value.strip(),
                            'domain': '.freepik.com',
                            'path': '/',
                            'secure': False,
                            'httpOnly': False
                        })
                
                print(f"‚úì ƒê√£ parse {len(cookies)} cookie t·ª´ cookie string")
                return cookies
                
        except Exception as e:
            print(f"‚ùå L·ªói parse cookie: {e}")
            return []
    
    def set_cookies(self, page: Page, cookies):
        """
        Thi·∫øt l·∫≠p cookie cho trang web
        
        Args:
            page: Playwright page object
            cookies: Danh s√°ch cookie
        """
        try:
            if cookies:
                page.context.add_cookies(cookies)
                print(f"‚úì ƒê√£ thi·∫øt l·∫≠p {len(cookies)} cookie")
            else:
                print("‚ö†Ô∏è Kh√¥ng c√≥ cookie ƒë·ªÉ thi·∫øt l·∫≠p")
        except Exception as e:
            print(f"‚ùå L·ªói thi·∫øt l·∫≠p cookie: {e}")

    def generate_video_from_image(self, image_path: str, prompt: str, cookie_string: str = None, duration: str = "5s", ratio: str = "1:1"):
        """
        Sinh video t·ª´ ·∫£nh s·ª≠ d·ª•ng Freepik AI Image-to-Video v·ªõi Kling 2.1 Master
        
        Args:
            image_path: ƒê∆∞·ªùng d·∫´n t·ªõi ·∫£nh ƒë·∫ßu v√†o
            prompt: M√¥ t·∫£ video c·∫ßn sinh
            cookie_string: Cookie ƒë·ªÉ ƒëƒÉng nh·∫≠p (string ho·∫∑c JSON)
            duration: Th·ªùi l∆∞·ª£ng video ("5s" ho·∫∑c "10s")
            ratio: T·ª∑ l·ªá khung h√¨nh ("1:1", "16:9", "9:16")
            
        Returns:
            str: ƒê∆∞·ªùng d·∫´n file video ƒë√£ t·∫£i v·ªÅ
        """
        print(f"üé¨ B·∫Øt ƒë·∫ßu sinh video t·ª´ ·∫£nh: {image_path}")
        print(f"üìù Prompt: {prompt}")
        
        if not os.path.exists(image_path):
            raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file ·∫£nh: {image_path}")
        
        # T·∫°o session folder cho l·∫ßn generate n√†y
        session_dir = self._create_session_folder("image_to_video")
        
        # Copy ·∫£nh input v√†o session folder
        input_image_path = self._copy_input_file(image_path, "input_image" + Path(image_path).suffix)
        
        # Chu·∫©n b·ªã metadata
        session_metadata = {
            "type": "image_to_video",
            "prompt": prompt,
            "duration": duration,
            "ratio": ratio,
            "input_image": os.path.basename(input_image_path),
            "original_image_path": image_path
        }
        
        with sync_playwright() as p:
            # Kh·ªüi ƒë·ªông tr√¨nh duy·ªát
            browser = p.firefox.launch(headless=self.headless)
            context = browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            )
            page = context.new_page()
            
            try:
                # Thi·∫øt l·∫≠p cookie n·∫øu c√≥
                if cookie_string:
                    cookies = self.parse_cookies(cookie_string)
                    self.set_cookies(page, cookies)
                
                # ƒêi ƒë·∫øn trang Pikaso Video
                print("üåê ƒêang m·ªü trang Freepik Pikaso Video...")
                page.goto("https://www.freepik.com/pikaso/ai-video-generator", 
                         wait_until="networkidle", timeout=30000)
                
                # Ch·ªù trang load
                time.sleep(5)
                
                # Ch·ªçn ch·∫ø ƒë·ªô Image-to-Video
                print("üñºÔ∏è Ch·ªçn ch·∫ø ƒë·ªô Image-to-Video...")
                try:
                    img_to_video_selectors = [
                        "button:has-text('Image to Video')",
                        "button:has-text('image to video')",
                        "[data-testid*='image-to-video']",
                        ".image-to-video",
                        "tab:has-text('Image')",
                        "button[aria-label*='Image']"
                    ]
                    
                    for selector in img_to_video_selectors:
                        try:
                            if page.query_selector(selector):
                                page.click(selector, timeout=3000)
                                print("‚úÖ ƒê√£ ch·ªçn ch·∫ø ƒë·ªô Image-to-Video")
                                time.sleep(2)
                                break
                        except:
                            continue
                    else:
                        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ch·∫ø ƒë·ªô Image-to-Video, ti·∫øp t·ª•c...")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi ch·ªçn ch·∫ø ƒë·ªô Image-to-Video: {e}")
                
                # Upload ·∫£nh
                print("üì§ ƒêang upload ·∫£nh...")
                try:
                    upload_selectors = [
                        "input[type='file']",
                        "[data-testid*='upload']",
                        ".upload-input",
                        "input[accept*='image']"
                    ]
                    
                    uploaded = False
                    for selector in upload_selectors:
                        try:
                            upload_input = page.query_selector(selector)
                            if upload_input:
                                upload_input.set_input_files(image_path)
                                print("‚úÖ ƒê√£ upload ·∫£nh th√†nh c√¥ng")
                                uploaded = True
                                time.sleep(3)
                                break
                        except:
                            continue
                    
                    if not uploaded:
                        # Th·ª≠ t√¨m button upload v√† click
                        upload_button_selectors = [
                            "button:has-text('Upload')",
                            "button:has-text('Choose')",
                            ".upload-button",
                            "[data-testid*='upload-button']"
                        ]
                        
                        for selector in upload_button_selectors:
                            try:
                                if page.query_selector(selector):
                                    page.click(selector)
                                    time.sleep(1)
                                    
                                    # T√¨m input file sau khi click
                                    file_input = page.query_selector("input[type='file']")
                                    if file_input:
                                        file_input.set_input_files(image_path)
                                        print("‚úÖ ƒê√£ upload ·∫£nh th√†nh c√¥ng")
                                        uploaded = True
                                        time.sleep(3)
                                        break
                            except:
                                continue
                    
                    if not uploaded:
                        raise Exception("Kh√¥ng th·ªÉ upload ·∫£nh")
                        
                except Exception as e:
                    print(f"‚ùå L·ªói upload ·∫£nh: {e}")
                    raise
                
                # Ch·ªçn model Kling 2.1 Master
                print("‚öôÔ∏è ƒêang ch·ªçn model Kling 2.1 Master...")
                try:
                    time.sleep(3)
                    
                    # T√¨m dropdown model
                    model_selectors = [
                        "button:has-text('Model')",
                        "[data-testid*='model']",
                        "button[aria-label*='model']",
                        ".model-selector",
                        ".model-dropdown",
                        "select",
                        "[role='combobox']"
                    ]
                    
                    model_clicked = False
                    for selector in model_selectors:
                        try:
                            if page.query_selector(selector):
                                page.click(selector, timeout=3000)
                                time.sleep(2)
                                model_clicked = True
                                print(f"‚úì ƒê√£ click model selector: {selector}")
                                break
                        except:
                            continue
                    
                    if model_clicked:
                        # T√¨m v√† ch·ªçn Kling 2.1 Master
                        kling_selectors = [
                            "text=Kling 2.1 Master",
                            "text=kling 2.1 master",
                            "text=Kling 2.1",
                            "text=kling 2.1",
                            "[data-value*='kling']",
                            "option[value*='kling']",
                            "li:has-text('Kling')",
                            "div:has-text('Kling 2.1')"
                        ]
                        
                        kling_selected = False
                        for kling_selector in kling_selectors:
                            try:
                                if page.query_selector(kling_selector):
                                    page.click(kling_selector, timeout=2000)
                                    print("‚úÖ ƒê√£ ch·ªçn model Kling 2.1 Master")
                                    kling_selected = True
                                    break
                            except:
                                continue
                        
                        if not kling_selected:
                            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y model Kling 2.1 Master, s·ª≠ d·ª•ng model m·∫∑c ƒë·ªãnh")
                    else:
                        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y model selector, s·ª≠ d·ª•ng model m·∫∑c ƒë·ªãnh")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi ch·ªçn model: {e}")
                    print("üìù Ti·∫øp t·ª•c v·ªõi model m·∫∑c ƒë·ªãnh")
                
                # Nh·∫≠p prompt (n·∫øu c√≥)
                if prompt:
                    print("‚úçÔ∏è ƒêang nh·∫≠p prompt...")
                    try:
                        prompt_selectors = [
                            "textarea[placeholder*='Describe']",
                            "textarea[placeholder*='describe']", 
                            "textarea[placeholder*='prompt']",
                            "textarea[placeholder*='Prompt']",
                            "textarea[data-testid*='prompt']",
                            "textarea",
                            "[contenteditable='true']",
                            "[role='textbox']"
                        ]
                        
                        prompt_entered = False
                        for selector in prompt_selectors:
                            try:
                                element = page.query_selector(selector)
                                if element and element.is_enabled() and element.is_visible():
                                    page.click(selector)
                                    page.fill(selector, prompt)
                                    print("‚úÖ ƒê√£ nh·∫≠p prompt")
                                    prompt_entered = True
                                    break
                            except:
                                continue
                        
                        if not prompt_entered:
                            print("‚ö†Ô∏è Kh√¥ng th·ªÉ nh·∫≠p prompt, ti·∫øp t·ª•c...")
                            
                    except Exception as e:
                        print(f"‚ö†Ô∏è L·ªói nh·∫≠p prompt: {e}")
                
                # Thi·∫øt l·∫≠p duration v√† ratio
                print(f"‚öôÔ∏è Thi·∫øt l·∫≠p duration: {duration}, ratio: {ratio}")
                try:
                    # Thi·∫øt l·∫≠p duration
                    duration_selectors = [
                        f"button:has-text('{duration}')",
                        f"[data-value='{duration}']",
                        f"option[value='{duration}']"
                    ]
                    
                    for selector in duration_selectors:
                        try:
                            if page.query_selector(selector):
                                page.click(selector)
                                print(f"‚úì ƒê√£ ch·ªçn duration: {duration}")
                                break
                        except:
                            continue
                    
                    # Thi·∫øt l·∫≠p ratio
                    ratio_selectors = [
                        f"button:has-text('{ratio}')",
                        f"[data-value='{ratio}']",
                        f"option[value='{ratio}']"
                    ]
                    
                    for selector in ratio_selectors:
                        try:
                            if page.query_selector(selector):
                                page.click(selector)
                                print(f"‚úì ƒê√£ ch·ªçn ratio: {ratio}")
                                break
                        except:
                            continue
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói thi·∫øt l·∫≠p duration/ratio: {e}")
                
                # T√¨m v√† click n√∫t Generate
                print("üöÄ ƒêang b·∫Øt ƒë·∫ßu sinh video...")
                generate_selectors = [
                    "button[data-testid*='generate']",
                    "button:has-text('Generate')",
                    "button:has-text('Create')", 
                    ".generate-btn",
                    "input[type='submit']"
                ]
                
                generated = False
                for selector in generate_selectors:
                    try:
                        if page.query_selector(selector):
                            page.click(selector, timeout=3000)
                            print("‚úì ƒê√£ click n√∫t sinh video")
                            generated = True
                            break
                    except:
                        continue
                
                if not generated:
                    raise Exception("Kh√¥ng t√¨m th·∫•y n√∫t Generate")
                
                # ƒê·ª£i video ƒë∆∞·ª£c sinh
                print("‚è≥ ƒêang ch·ªù video ƒë∆∞·ª£c sinh...")
                success = self._wait_for_video_generation(timeout_seconds=180)  # 3 ph√∫t
                
                if not success:
                    raise Exception("Sinh video th·∫•t b·∫°i ho·∫∑c timeout")
                
                # T·∫£i video v·ªÅ
                print("üíæ ƒêang t·∫£i video...")
                video_path = self._download_video_to_session()
                
                if video_path:
                    # L∆∞u metadata cu·ªëi c√πng
                    session_metadata["output_video"] = os.path.basename(video_path)
                    session_metadata["status"] = "completed"
                    self._save_session_metadata(session_metadata)
                    
                    print(f"‚úÖ ƒê√£ t·∫£i video th√†nh c√¥ng: {video_path}")
                    print(f"üìÅ Session folder: {self.current_session_dir}")
                    return video_path
                else:
                    # L∆∞u metadata th·∫•t b·∫°i
                    session_metadata["status"] = "failed"
                    session_metadata["error"] = "Download failed"
                    self._save_session_metadata(session_metadata)
                    raise Exception("Kh√¥ng th·ªÉ t·∫£i video")
                    
            except Exception as e:
                print(f"‚ùå L·ªói sinh video: {e}")
                return None
            finally:
                browser.close()

    def generate_video(self, prompt: str, cookie_string: str = None, duration: str = "5s", ratio: str = "1:1"):
        """
        Sinh video t·ª´ prompt s·ª≠ d·ª•ng Freepik AI
        
        Args:
            prompt: M√¥ t·∫£ video c·∫ßn sinh
            cookie_string: Cookie ƒë·ªÉ ƒëƒÉng nh·∫≠p (string ho·∫∑c JSON)
            duration: Th·ªùi l∆∞·ª£ng video ("5s" ho·∫∑c "10s")
            ratio: T·ª∑ l·ªá khung h√¨nh ("1:1", "16:9", "9:16")
            
        Returns:
            str: ƒê∆∞·ªùng d·∫´n file video ƒë√£ t·∫£i v·ªÅ
        """
        print(f"üé¨ B·∫Øt ƒë·∫ßu sinh video v·ªõi prompt: {prompt}")
        
        # T·∫°o session folder cho l·∫ßn generate n√†y
        session_dir = self._create_session_folder("text_to_video")
        
        # Chu·∫©n b·ªã metadata
        session_metadata = {
            "type": "text_to_video",
            "prompt": prompt,
            "duration": duration,
            "ratio": ratio
        }
        
        with sync_playwright() as p:
            # Kh·ªüi ƒë·ªông tr√¨nh duy·ªát
            browser = p.firefox.launch(headless=self.headless)
            context = browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            )
            page = context.new_page()
            
            try:
                # Thi·∫øt l·∫≠p cookie n·∫øu c√≥
                if cookie_string:
                    cookies = self.parse_cookies(cookie_string)
                    self.set_cookies(page, cookies)
                
                # ƒêi ƒë·∫øn trang Pikaso Video
                print("üåê ƒêang m·ªü trang Freepik Pikaso Video...")
                page.goto("https://www.freepik.com/pikaso/ai-video-generator", 
                         wait_until="networkidle", timeout=30000)
                
                # Ch·ªù v√† t√¨m √¥ nh·∫≠p prompt
                print("üîç T√¨m √¥ nh·∫≠p prompt...")
                
                # Danh s√°ch c√°c selector c√≥ th·ªÉ c√≥
                potential_selectors = [
                    "textarea[placeholder*='Describe']",
                    "textarea[placeholder*='describe']", 
                    "textarea[placeholder*='prompt']",
                    "textarea[placeholder*='Prompt']",
                    "textarea[data-testid*='prompt']",
                    "textarea[data-testid*='input']",
                    "[contenteditable='true']",
                    "textarea",
                    "input[type='text']",
                    "[role='textbox']",
                    ".prompt-input",
                    "#prompt",
                    "#prompt-input",
                    ".text-input",
                    "[name='prompt']",
                    "[placeholder*='Enter']",
                    "[placeholder*='Type']"
                ]
                
                prompt_selector = None
                found = False
                
                # Th·ª≠ t·ª´ng selector
                for selector in potential_selectors:
                    try:
                        page.wait_for_selector(selector, timeout=2000)
                        
                        # Ki·ªÉm tra xem element c√≥ th·ªÉ nh·∫≠p ƒë∆∞·ª£c kh√¥ng
                        element = page.query_selector(selector)
                        if element and element.is_enabled() and element.is_visible():
                            prompt_selector = selector
                            found = True
                            print(f"‚úì T√¨m th·∫•y √¥ prompt v·ªõi selector: {selector}")
                            break
                    except:
                        continue
                
                if not found:
                    # Debug: In ra t·∫•t c·∫£ c√°c element c√≥ th·ªÉ l√† input
                    print("üîç Debug: T√¨m t·∫•t c·∫£ input elements...")
                    try:
                        all_inputs = page.query_selector_all("input, textarea, [contenteditable], [role='textbox']")
                        print(f"T√¨m th·∫•y {len(all_inputs)} input elements:")
                        for i, inp in enumerate(all_inputs[:5]):  # Ch·ªâ in 5 c√°i ƒë·∫ßu
                            tag = inp.evaluate("el => el.tagName")
                            placeholder = inp.get_attribute("placeholder") or ""
                            data_testid = inp.get_attribute("data-testid") or ""
                            role = inp.get_attribute("role") or ""
                            print(f"  {i+1}. <{tag}> placeholder='{placeholder}' data-testid='{data_testid}' role='{role}'")
                    except Exception as e:
                        print(f"Debug error: {e}")
                    
                    raise Exception("Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p prompt")
                
                # Nh·∫≠p prompt
                print("‚úçÔ∏è ƒêang nh·∫≠p prompt...")
                
                # Th·ª≠ nhi·ªÅu c√°ch nh·∫≠p text
                try:
                    # C√°ch 1: Clear v√† fill
                    page.click(prompt_selector)
                    page.fill(prompt_selector, "")  # Clear tr∆∞·ªõc
                    page.fill(prompt_selector, prompt)
                    
                    # Ki·ªÉm tra xem text ƒë√£ ƒë∆∞·ª£c nh·∫≠p ch∆∞a
                    current_value = page.input_value(prompt_selector) if page.query_selector(prompt_selector).get_attribute("value") is not None else page.text_content(prompt_selector)
                    
                    if not current_value or len(current_value.strip()) == 0:
                        print("‚ö†Ô∏è C√°ch 1 kh√¥ng th√†nh c√¥ng, th·ª≠ c√°ch 2...")
                        # C√°ch 2: Type t·ª´ng k√Ω t·ª±
                        page.click(prompt_selector)
                        page.keyboard.press("Control+A")  # Select all
                        page.keyboard.press("Delete")     # Delete
                        page.type(prompt_selector, prompt, delay=50)
                        
                        current_value = page.input_value(prompt_selector) if page.query_selector(prompt_selector).get_attribute("value") is not None else page.text_content(prompt_selector)
                        
                        if not current_value or len(current_value.strip()) == 0:
                            print("‚ö†Ô∏è C√°ch 2 kh√¥ng th√†nh c√¥ng, th·ª≠ c√°ch 3...")
                            # C√°ch 3: S·ª≠ d·ª•ng JavaScript
                            page.evaluate(f"""
                                const element = document.querySelector('{prompt_selector}');
                                if (element) {{
                                    element.value = `{prompt}`;
                                    element.textContent = `{prompt}`;
                                    element.innerHTML = `{prompt}`;
                                    
                                    // Trigger events
                                    element.dispatchEvent(new Event('input', {{ bubbles: true }}));
                                    element.dispatchEvent(new Event('change', {{ bubbles: true }}));
                                }}
                            """)
                            
                            # Ki·ªÉm tra l·∫°i
                            current_value = page.input_value(prompt_selector) if page.query_selector(prompt_selector).get_attribute("value") is not None else page.text_content(prompt_selector)
                            
                            if not current_value or len(current_value.strip()) == 0:
                                print("‚ùå Kh√¥ng th·ªÉ nh·∫≠p prompt b·∫±ng m·ªçi c√°ch!")
                                raise Exception("Kh√¥ng th·ªÉ nh·∫≠p prompt v√†o √¥ input")
                    
                    print(f"‚úÖ ƒê√£ nh·∫≠p prompt th√†nh c√¥ng: {current_value[:50]}...")
                    
                except Exception as e:
                    print(f"‚ùå L·ªói khi nh·∫≠p prompt: {e}")
                    raise
                
                # Ch·ªçn model Kling Master 2.1
                print("‚öôÔ∏è ƒêang ch·ªçn model Kling Master 2.1...")
                try:
                    # T√¨m v√† click v√†o dropdown model
                    model_selectors = [
                        "[data-testid*='model']",
                        "button[aria-label*='model']",
                        ".model-selector",
                        "select"
                    ]
                    
                    for selector in model_selectors:
                        try:
                            page.click(selector, timeout=3000)
                            time.sleep(1)
                            
                            # T√¨m v√† ch·ªçn Kling Master 2.1
                            kling_selectors = [
                                "text=Kling Master 2.1",
                                "[data-value*='kling']",
                                "option[value*='kling']"
                            ]
                            
                            for kling_selector in kling_selectors:
                                try:
                                    page.click(kling_selector, timeout=2000)
                                    print("‚úì ƒê√£ ch·ªçn model Kling Master 2.1")
                                    break
                                except:
                                    continue
                            break
                        except:
                            continue
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ch·ªçn model: {e}")
                    print("üìù S·ª≠ d·ª•ng model m·∫∑c ƒë·ªãnh")
                
                # Ch·ªçn th·ªùi l∆∞·ª£ng video
                print(f"‚è±Ô∏è ƒêang ch·ªçn th·ªùi l∆∞·ª£ng: {duration}")
                try:
                    duration_selectors = [
                        f"button:has-text('{duration}')",
                        f"[data-value='{duration}']",
                        f".duration-{duration}"
                    ]
                    
                    for selector in duration_selectors:
                        try:
                            page.click(selector, timeout=3000)
                            print(f"‚úì ƒê√£ ch·ªçn th·ªùi l∆∞·ª£ng {duration}")
                            break
                        except:
                            continue
                except Exception as e:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ch·ªçn th·ªùi l∆∞·ª£ng: {e}")
                
                # Ch·ªçn t·ª∑ l·ªá khung h√¨nh
                print(f"üìè ƒêang ch·ªçn t·ª∑ l·ªá: {ratio}")
                try:
                    ratio_selectors = [
                        f"button:has-text('{ratio}')",
                        f"[data-value='{ratio}']",
                        f".ratio-{ratio.replace(':', 'x')}"
                    ]
                    
                    for selector in ratio_selectors:
                        try:
                            page.click(selector, timeout=3000)
                            print(f"‚úì ƒê√£ ch·ªçn t·ª∑ l·ªá {ratio}")
                            break
                        except:
                            continue
                except Exception as e:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ch·ªçn t·ª∑ l·ªá: {e}")
                
                # T√¨m v√† click n√∫t Generate
                print("üöÄ ƒêang b·∫Øt ƒë·∫ßu sinh video...")
                generate_selectors = [
                    "button[data-testid*='generate']",
                    "button:has-text('Generate')",
                    "button:has-text('Create')", 
                    ".generate-btn",
                    "input[type='submit']"
                ]
                
                generated = False
                for selector in generate_selectors:
                    try:
                        page.click(selector, timeout=3000)
                        print("‚úì ƒê√£ click n√∫t sinh video")
                        generated = True
                        break
                    except:
                        continue
                
                if not generated:
                    raise Exception("Kh√¥ng t√¨m th·∫•y n√∫t Generate")
                
                # Ch·ªù video ƒë∆∞·ª£c sinh ra
                print("‚è≥ ƒêang ch·ªù video ƒë∆∞·ª£c sinh ra...")
                
                # ƒê·ª£i k·∫øt qu·∫£ trong 180 gi√¢y (video m·∫•t nhi·ªÅu th·ªùi gian h∆°n ·∫£nh)
                result_found = False
                for i in range(180):
                    try:
                        # T√¨m video k·∫øt qu·∫£ ho·∫∑c n√∫t download
                        result_selectors = [
                            "video[src*='generated']",
                            "button:has-text('Download')",
                            ".result-video",
                            ".generated-video",
                            "[data-testid*='result'] video",
                            ".download-btn"
                        ]
                        
                        for selector in result_selectors:
                            try:
                                page.wait_for_selector(selector, timeout=2000)
                                print("‚úÖ Video ƒë√£ ƒë∆∞·ª£c sinh ra!")
                                result_found = True
                                break
                            except:
                                continue
                        
                        if result_found:
                            break
                            
                        time.sleep(1)
                        print(f"‚è≥ ƒêang ch·ªù... ({i+1}/180s)")
                        
                    except:
                        time.sleep(1)
                
                if not result_found:
                    raise Exception("Timeout: Video kh√¥ng ƒë∆∞·ª£c sinh ra sau 180 gi√¢y")
                
                # T·∫£i video v·ªÅ session folder
                print("üíæ ƒêang t·∫£i video v·ªÅ...")
                
                # T·∫°o t√™n file video v·ªõi timestamp
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"video_output_{timestamp}.mp4"
                filepath = os.path.join(self.current_session_dir, filename)
                
                # T√¨m link download
                download_selectors = [
                    "a[download]",
                    "button:has-text('Download')",
                    ".download-btn"
                ]
                
                downloaded = False
                for selector in download_selectors:
                    try:
                        with page.expect_download() as download_info:
                            page.click(selector, timeout=5000)
                        download = download_info.value
                        download.save_as(filepath)
                        downloaded = True
                        break
                    except:
                        continue
                
                if downloaded:
                    # L∆∞u metadata th√†nh c√¥ng
                    session_metadata["output_video"] = os.path.basename(filepath)
                    session_metadata["status"] = "completed"
                    self._save_session_metadata(session_metadata)
                    
                    print(f"‚úÖ ƒê√£ l∆∞u video: {filepath}")
                    print(f"üìÅ Session folder: {self.current_session_dir}")
                    return filepath
                else:
                    # L∆∞u metadata th·∫•t b·∫°i
                    session_metadata["status"] = "failed"
                    session_metadata["error"] = "Download failed"
                    self._save_session_metadata(session_metadata)
                    raise Exception("Kh√¥ng th·ªÉ t·∫£i video v·ªÅ")
                    
            except Exception as e:
                # L∆∞u metadata l·ªói
                session_metadata["status"] = "error"
                session_metadata["error"] = str(e)
                self._save_session_metadata(session_metadata)
                
                print(f"‚ùå L·ªói khi sinh video: {e}")
                return None
                
            finally:
                browser.close() 