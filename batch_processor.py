"""
Batch Processor cho FAZZYTOOL - Phi√™n b·∫£n t·ªëi ∆∞u
X·ª≠ l√Ω h√†ng lo·∫°t prompt t·ª´ c√°c file template v·ªõi c√°c t√≠nh nƒÉng n√¢ng cao
"""

import asyncio
import json
import re
import os
from datetime import datetime
from typing import List, Dict, Any
import configparser

class BatchProcessor:
    def __init__(self):
        self.config = self.load_config()
        self.prompts = []
        self.cookies = []
        
    def load_config(self) -> Dict[str, Any]:
        """ƒê·ªçc c·∫•u h√¨nh t·ª´ config_template.txt"""
        config = {
            'api_key': 'AIzaSyDvEEI2MX3hwh4mrDBRB01hjHcdAiz4a9Q',
            'wait_time': 3,
            'max_retries': 3,
            'max_concurrent': 2,
            'delay_between_requests': 5,
            'browser': 'chrome',
            'headless': False,
            'output_folder': 'output',
            # C·∫•u h√¨nh m·ªõi cho image generation
            'default_num_images': 4,
            'default_download_count': 2,
            'auto_filename_prefix': True
        }
        
        try:
            if os.path.exists('config_template.txt'):
                with open('config_template.txt', 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # Parse simple key=value format
                for line in content.split('\n'):
                    line = line.strip()
                    if '=' in line and not line.startswith('#') and not line.startswith('[') and not line.startswith('==='):
                        key, value = line.split('=', 1)
                        key = key.strip().lower()
                        value = value.strip()
                        
                        # Remove inline comments
                        if '#' in value:
                            value = value.split('#')[0].strip()
                        
                        try:
                            if key == 'api_key':
                                config['api_key'] = value
                            elif key == 'wait_time':
                                config['wait_time'] = int(value)
                            elif key == 'max_retries':
                                config['max_retries'] = int(value)
                            elif key == 'max_concurrent':
                                config['max_concurrent'] = int(value)
                            elif key == 'delay_between_requests':
                                config['delay_between_requests'] = int(value)
                            elif key == 'browser':
                                config['browser'] = value
                            elif key == 'headless':
                                config['headless'] = value.lower() == 'true'
                            elif key == 'output_folder':
                                config['output_folder'] = value
                            elif key == 'default_num_images':
                                config['default_num_images'] = int(value)
                            elif key == 'default_download_count':
                                config['default_download_count'] = int(value)
                            elif key == 'auto_filename_prefix':
                                config['auto_filename_prefix'] = value.lower() == 'true'
                        except ValueError as e:
                            print(f"L·ªói parse {key}={value}: {e}")
                            continue
                            
        except Exception as e:
            print(f"L·ªói ƒë·ªçc config: {e}, s·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh")
            
        return config
        
    def load_cookies_from_template(self) -> List[Dict]:
        """ƒê·ªçc cookie t·ª´ cookie_template.txt"""
        cookies = []
        
        try:
            if os.path.exists('cookie_template.txt'):
                with open('cookie_template.txt', 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # T√¨m ph·∫ßn JSON cookie
                start_marker = "=== PASTE COOKIE JSON V√ÄO ƒê√ÇY ==="
                end_marker = "=== K·∫æT TH√öC COOKIE ==="
                
                if start_marker in content and end_marker in content:
                    start_idx = content.find(start_marker) + len(start_marker)
                    end_idx = content.find(end_marker)
                    json_content = content[start_idx:end_idx].strip()
                    
                    if json_content and not json_content.startswith('['):
                        # N·∫øu kh√¥ng ph·∫£i JSON array, th·ª≠ parse t·ª´ng d√≤ng
                        lines = json_content.split('\n')
                        json_content = '\n'.join([line for line in lines if line.strip()])
                    
                    if json_content:
                        cookies = json.loads(json_content)
                        
        except Exception as e:
            print(f"L·ªói ƒë·ªçc cookie template: {e}")
            
        return cookies
        
    def parse_prompts_from_template(self, file_path: str = 'prompts_template.txt') -> List[Dict]:
        """Parse prompts t·ª´ template file v·ªõi h·ªó tr·ª£ c·∫•u h√¨nh n√¢ng cao"""
        prompts = []
        
        try:
            if not os.path.exists(file_path):
                print(f"Kh√¥ng t√¨m th·∫•y file {file_path}")
                return prompts
                
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Parse PROMPT_IDEA (cho AI Gemini)
            idea_pattern = r'PROMPT_IDEA_START\s*(.*?)\s*PROMPT_IDEA_END'
            idea_matches = re.findall(idea_pattern, content, re.DOTALL)
            
            for i, idea in enumerate(idea_matches, 1):
                prompts.append({
                    'type': 'ai_idea',
                    'content': idea.strip(),
                    'use_ai': True,
                    'prompt_id': f'ai_idea_{i:03d}',
                    'num_images': self.config['default_num_images'],
                    'download_count': self.config['default_download_count'],
                    'filename_prefix': f'ai_idea_{i:03d}' if self.config['auto_filename_prefix'] else None
                })
                
            # Parse DETAILED_PROMPT (th·ªß c√¥ng)
            detail_pattern = r'DETAILED_PROMPT_START\s*(.*?)\s*DETAILED_PROMPT_END'
            detail_matches = re.findall(detail_pattern, content, re.DOTALL)
            
            for i, detail in enumerate(detail_matches, 1):
                prompts.append({
                    'type': 'detailed',
                    'content': detail.strip(),
                    'use_ai': False,
                    'prompt_id': f'detailed_{i:03d}',
                    'num_images': self.config['default_num_images'],
                    'download_count': self.config['default_download_count'],
                    'filename_prefix': f'detailed_{i:03d}' if self.config['auto_filename_prefix'] else None
                })
                
            # Parse JSON_PROMPTS v·ªõi c·∫•u h√¨nh n√¢ng cao
            json_pattern = r'JSON_PROMPTS_START\s*(.*?)\s*JSON_PROMPTS_END'
            json_matches = re.findall(json_pattern, content, re.DOTALL)
            
            for json_content in json_matches:
                try:
                    json_prompts = json.loads(json_content.strip())
                    for i, jp in enumerate(json_prompts, 1):
                        prompt_item = {
                            'type': 'json',
                            'content': jp.get('prompt', ''),
                            'style': jp.get('style', ''),
                            'media_type': jp.get('type', 'image'),
                            'use_ai': False,
                            'prompt_id': f'json_{i:03d}',
                            # H·ªó tr·ª£ c·∫•u h√¨nh n√¢ng cao t·ª´ JSON
                            'num_images': jp.get('num_images', self.config['default_num_images']),
                            'download_count': jp.get('download_count', self.config['default_download_count']),
                            'filename_prefix': jp.get('filename_prefix') or (f'json_{i:03d}' if self.config['auto_filename_prefix'] else None)
                        }
                        prompts.append(prompt_item)
                except json.JSONDecodeError as e:
                    print(f"L·ªói parse JSON prompt: {e}")
                    
        except Exception as e:
            print(f"L·ªói ƒë·ªçc prompt template: {e}")
            
        return prompts
        
    def get_available_images(self) -> List[str]:
        """L·∫•y danh s√°ch ·∫£nh c√≥ s·∫µn trong th∆∞ m·ª•c output ƒë·ªÉ l√†m image-to-video"""
        image_files = []
        
        if os.path.exists('output'):
            for file in os.listdir('output'):
                if file.lower().endswith(('.png', '.jpg', '.jpeg', '.webp', '.gif')):
                    image_files.append(os.path.join('output', file))
        
        # Sort theo t√™n file ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª±
        image_files.sort()
        return image_files
    
    def create_batch_job(self) -> Dict[str, Any]:
        """T·∫°o batch job t·ª´ c√°c template v·ªõi c·∫•u h√¨nh n√¢ng cao"""
        cookies = self.load_cookies_from_template()
        prompts = self.parse_prompts_from_template()
        available_images = self.get_available_images()
        
        if not cookies:
            print("‚ö†Ô∏è  Ch∆∞a c√≥ cookie! Vui l√≤ng c·∫≠p nh·∫≠t cookie_template.txt")
            
        if not prompts:
            print("‚ö†Ô∏è  Ch∆∞a c√≥ prompt! Vui l√≤ng c·∫≠p nh·∫≠t prompts_template.txt")
            print(f"üîç Debug: ƒê√£ ki·ªÉm tra file prompts_template.txt")
            if os.path.exists('prompts_template.txt'):
                print(f"‚úÖ File t·ªìn t·∫°i, k√≠ch th∆∞·ªõc: {os.path.getsize('prompts_template.txt')} bytes")
            else:
                print(f"‚ùå File kh√¥ng t·ªìn t·∫°i")
        
        # Ph√¢n lo·∫°i prompts th√†nh image v√† video v·ªõi th√¥ng tin chi ti·∫øt
        image_prompts = []
        video_prompts = []
        
        for prompt in prompts:
            media_type = prompt.get('media_type', 'image')
            if media_type == 'video':
                video_prompts.append(prompt)
            else:
                image_prompts.append(prompt)
        
        # T√≠nh to√°n th·ªëng k√™
        total_images_to_generate = sum(p.get('num_images', 4) for p in image_prompts)
        total_images_to_download = sum(p.get('download_count', 2) for p in image_prompts)
        
        batch_job = {
            'timestamp': datetime.now().strftime('%Y%m%d_%H%M%S'),
            'config': self.config,
            'cookies': cookies,
            'prompts': prompts,
            'image_prompts': image_prompts,
            'video_prompts': video_prompts,
            'available_images': available_images,
            'total_items': len(prompts),
            'total_images_to_generate': total_images_to_generate,
            'total_images_to_download': total_images_to_download,
            'workflow': self._determine_workflow(image_prompts, video_prompts, available_images),
            'status': 'ready'
        }
        
        return batch_job
    
    def _determine_workflow(self, image_prompts: List[Dict], video_prompts: List[Dict], available_images: List[str]) -> str:
        """X√°c ƒë·ªãnh workflow d·ª±a tr√™n prompts v√† ·∫£nh c√≥ s·∫µn"""
        
        if len(image_prompts) > 0 and len(video_prompts) > 0:
            return "image_then_video"  # T·∫°o ·∫£nh tr∆∞·ªõc, r·ªìi d√πng ·∫£nh ƒë·ªÉ t·∫°o video
        elif len(image_prompts) > 0:
            return "image_only"  # Ch·ªâ t·∫°o ·∫£nh
        elif len(video_prompts) > 0 and len(available_images) > 0:
            return "video_from_existing_images"  # D√πng ·∫£nh c√≥ s·∫µn ƒë·ªÉ t·∫°o video
        elif len(video_prompts) > 0:
            return "video_text_to_video"  # T·∫°o video t·ª´ text (n·∫øu kh√¥ng c√≥ ·∫£nh)
        else:
            return "unknown"
        
    def save_batch_report(self, results: List[Dict], job_info: Dict):
        """L∆∞u b√°o c√°o batch v·ªõi th√¥ng tin chi ti·∫øt h∆°n"""
        timestamp = job_info['timestamp']
        report_file = f"output/batch_report_{timestamp}.json"
        
        os.makedirs('output', exist_ok=True)
        
        # T√≠nh to√°n th·ªëng k√™ chi ti·∫øt
        total_images_generated = sum(len(r.get('downloaded_files', [])) for r in results if r.get('type') == 'image')
        total_videos_generated = len([r for r in results if r.get('type') == 'video' and r.get('status') == 'success'])
        
        report = {
            'job_info': job_info,
            'results': results,
            'summary': {
                'total_prompts': len(results),
                'success': len([r for r in results if r.get('status') == 'success']),
                'failed': len([r for r in results if r.get('status') == 'failed']),
                'total_images_generated': total_images_generated,
                'total_videos_generated': total_videos_generated,
                'completion_time': datetime.now().isoformat(),
                'estimated_credits_used': total_images_generated * 10 + total_videos_generated * 25  # ∆Ø·ªõc t√≠nh
            },
            'file_mapping': self._create_file_mapping(results)
        }
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
            
        print(f"üìä B√°o c√°o batch ƒë√£ l∆∞u: {report_file}")
        
        # T·∫°o file CSV ƒë∆°n gi·∫£n ƒë·ªÉ d·ªÖ xem
        self._create_csv_report(results, job_info, timestamp)
        
    def _create_file_mapping(self, results: List[Dict]) -> Dict:
        """T·∫°o b·∫£n ƒë·ªì file ƒë·ªÉ d·ªÖ tracking"""
        mapping = {
            'images': {},
            'videos': {}
        }
        
        for result in results:
            prompt_id = result.get('prompt_id', 'unknown')
            if result.get('type') == 'image' and result.get('downloaded_files'):
                mapping['images'][prompt_id] = {
                    'prompt': result.get('prompt', '')[:50] + '...',
                    'files': result['downloaded_files']
                }
            elif result.get('type') == 'video' and result.get('path'):
                mapping['videos'][prompt_id] = {
                    'prompt': result.get('prompt', '')[:50] + '...',
                    'file': result['path']
                }
        
        return mapping
    
    def _create_csv_report(self, results: List[Dict], job_info: Dict, timestamp: str):
        """T·∫°o b√°o c√°o CSV ƒë∆°n gi·∫£n"""
        csv_file = f"output/batch_report_{timestamp}.csv"
        
        try:
            with open(csv_file, 'w', encoding='utf-8') as f:
                # Header
                f.write("Prompt ID,Type,Status,Prompt,Files Generated\n")
                
                # Data
                for result in results:
                    prompt_id = result.get('prompt_id', 'unknown')
                    prompt_type = result.get('type', 'unknown')
                    status = result.get('status', 'unknown')
                    prompt = result.get('prompt', '').replace(',', ';').replace('\n', ' ')[:100]
                    
                    files = []
                    if prompt_type == 'image' and result.get('downloaded_files'):
                        files = [os.path.basename(f) for f in result['downloaded_files']]
                    elif prompt_type == 'video' and result.get('path'):
                        files = [os.path.basename(result['path'])]
                    
                    files_str = ';'.join(files)
                    
                    f.write(f"{prompt_id},{prompt_type},{status},\"{prompt}\",\"{files_str}\"\n")
                    
            print(f"üìà B√°o c√°o CSV ƒë√£ l∆∞u: {csv_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói t·∫°o CSV report: {e}")
        
    def print_batch_summary(self, job: Dict[str, Any]):
        """In t√≥m t·∫Øt batch job v·ªõi th√¥ng tin chi ti·∫øt h∆°n"""
        print("\n" + "="*60)
        print("üöÄ BATCH JOB SUMMARY - PHI√äN B·∫¢N T·ªêI ·ª¨U")
        print("="*60)
        print(f"üìÖ Th·ªùi gian: {job['timestamp']}")
        print(f"üîß C·∫•u h√¨nh: {job['config']['browser']} | Concurrent: {job['config']['max_concurrent']}")
        print(f"üç™ Cookie: {'‚úÖ C√≥' if job['cookies'] else '‚ùå Kh√¥ng'}")
        print(f"üìù T·ªïng prompt: {job['total_items']}")
        
        if job['prompts']:
            ai_prompts = len([p for p in job['prompts'] if p.get('use_ai')])
            manual_prompts = job['total_items'] - ai_prompts
            print(f"   ‚îú‚îÄ AI t·ª± ƒë·ªông: {ai_prompts}")
            print(f"   ‚îî‚îÄ Th·ªß c√¥ng: {manual_prompts}")
        
        # Hi·ªÉn th·ªã ph√¢n lo·∫°i media v·ªõi th√¥ng tin chi ti·∫øt
        image_count = len(job.get('image_prompts', []))
        video_count = len(job.get('video_prompts', []))
        available_images = len(job.get('available_images', []))
        
        print(f"üé® ·∫¢nh: {image_count} prompt")
        if image_count > 0:
            print(f"   ‚îú‚îÄ T·ªïng ·∫£nh s·∫Ω sinh: {job['total_images_to_generate']}")
            print(f"   ‚îî‚îÄ T·ªïng ·∫£nh s·∫Ω t·∫£i: {job['total_images_to_download']}")
        
        print(f"üé¨ Video: {video_count} prompt")
        print(f"üñºÔ∏è ·∫¢nh c√≥ s·∫µn: {available_images} file")
        
        # Hi·ªÉn th·ªã workflow
        workflow = job.get('workflow', 'unknown')
        workflow_descriptions = {
            'image_then_video': 'üîÑ T·∫°o ·∫£nh tr∆∞·ªõc ‚Üí D√πng ·∫£nh t·∫°o video',
            'image_only': 'üé® Ch·ªâ t·∫°o ·∫£nh v·ªõi c·∫•u h√¨nh n√¢ng cao',
            'video_from_existing_images': 'üé¨ T·∫°o video t·ª´ ·∫£nh c√≥ s·∫µn',
            'video_text_to_video': 'üé¨ T·∫°o video t·ª´ text',
            'unknown': '‚ùì Kh√¥ng x√°c ƒë·ªãnh'
        }
        
        print(f"üìã Workflow: {workflow_descriptions.get(workflow, workflow)}")
        
        # Th√¥ng tin chi ti·∫øt cho t·ª´ng workflow
        if workflow == 'image_only' and image_count > 0:
            print(f"   üì∏ Chi ti·∫øt c·∫•u h√¨nh:")
            for i, prompt in enumerate(job['image_prompts'][:3], 1):  # Ch·ªâ hi·ªÉn th·ªã 3 prompt ƒë·∫ßu
                print(f"     {i}. {prompt['prompt_id']}: {prompt['num_images']} ·∫£nh ‚Üí t·∫£i {prompt['download_count']}")
            if image_count > 3:
                print(f"     ... v√† {image_count - 3} prompt kh√°c")
        
        if workflow == 'video_from_existing_images' and available_images > 0:
            print(f"   üì∏ S·∫Ω d√πng {min(available_images, video_count)} ·∫£nh ƒë·ªÉ t·∫°o video")
            if video_count > available_images:
                print(f"   ‚ö†Ô∏è Thi·∫øu {video_count - available_images} ·∫£nh cho video prompts")
        
        # ∆Ø·ªõc t√≠nh th·ªùi gian v√† credits
        estimated_time = self._estimate_processing_time(job)
        estimated_credits = self._estimate_credits_usage(job)
        
        print(f"‚è±Ô∏è Th·ªùi gian ∆∞·ªõc t√≠nh: {estimated_time}")
        print(f"üí∞ Credits ∆∞·ªõc t√≠nh: {estimated_credits}")
        
        print("="*60)
        
        # Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán c·∫ßn thi·∫øt
        warnings = []
        
        if not job['cookies']:
            warnings.append("‚ö†Ô∏è Ch∆∞a c√≥ cookie Freepik! C·∫≠p nh·∫≠t cookie_template.txt")
            
        if not job['prompts']:
            warnings.append("‚ö†Ô∏è Ch∆∞a c√≥ prompt! C·∫≠p nh·∫≠t prompts_template.txt")
        
        if workflow == 'video_from_existing_images' and available_images == 0:
            warnings.append("‚ö†Ô∏è C√≥ video prompt nh∆∞ng kh√¥ng c√≥ ·∫£nh! T·∫°o ·∫£nh tr∆∞·ªõc ho·∫∑c upload ·∫£nh v√†o output/")
        
        if job['total_images_to_generate'] > 20:
            warnings.append("‚ö†Ô∏è S·ªë l∆∞·ª£ng ·∫£nh l·ªõn c√≥ th·ªÉ ti√™u t·ªën nhi·ªÅu credits Premium!")
            
        for warning in warnings:
            print(warning)
            
        # Ch·ªâ c√°c warning quan tr·ªçng m·ªõi l√†m job invalid
        critical_warnings = [w for w in warnings if any(keyword in w for keyword in ["Ch∆∞a c√≥ cookie", "Ch∆∞a c√≥ prompt", "Thi·∫øu", "video prompt nh∆∞ng kh√¥ng c√≥ ·∫£nh"])]
        
        return len(critical_warnings) == 0  # True n·∫øu kh√¥ng c√≥ critical warning
    
    def _estimate_processing_time(self, job: Dict) -> str:
        """∆Ø·ªõc t√≠nh th·ªùi gian x·ª≠ l√Ω"""
        image_time = job['total_images_to_generate'] * 8  # 8s per image
        video_time = len(job.get('video_prompts', [])) * 15  # 15s per video
        delay_time = (job['total_items'] - 1) * job['config']['delay_between_requests']
        
        total_seconds = image_time + video_time + delay_time
        
        if total_seconds < 60:
            return f"~{total_seconds} gi√¢y"
        elif total_seconds < 3600:
            return f"~{total_seconds // 60} ph√∫t {total_seconds % 60} gi√¢y"
        else:
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            return f"~{hours} gi·ªù {minutes} ph√∫t"
    
    def _estimate_credits_usage(self, job: Dict) -> str:
        """∆Ø·ªõc t√≠nh s·ªë credits s·ª≠ d·ª•ng"""
        image_credits = job['total_images_to_generate'] * 10  # 10 credits per image
        video_credits = len(job.get('video_prompts', [])) * 25  # 25 credits per video
        total_credits = image_credits + video_credits
        
        return f"~{total_credits} credits ({image_credits} ·∫£nh + {video_credits} video)" 