#!/usr/bin/env python3
"""
FAZZYTOOL - C√¥ng c·ª• t·ª± ƒë·ªông sinh ·∫£nh b·∫±ng Freepik AI

Tool n√†y t·ª± ƒë·ªông h√≥a vi·ªác sinh ·∫£nh tr√™n n·ªÅn t·∫£ng Freepik Pikaso
th√¥ng qua tr√¨nh duy·ªát t·ª± ƒë·ªông, d·ª±a tr√™n prompt do ng∆∞·ªùi d√πng ho·∫∑c Gemini API sinh ra.
"""

import os
import sys
import json
import click
import traceback
from pathlib import Path
from typing import Dict, Any, Optional, List
from datetime import datetime
from dotenv import load_dotenv

from prompt_loader import PromptLoader
from gemini_prompt import GeminiPromptGenerator
from browser_image import FreepikImageGenerator
from batch_processor import BatchProcessor

# Global configuration cho AI generation
AI_GENERATION_CONFIG = {
    'num_images': 4,
    'download_count': 2
}

# M√†u s·∫Øc cho terminal
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'


def print_banner():
    """In banner c·ªßa tool"""
    banner = f"""
    {Colors.BLUE}{Colors.BOLD}
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ïö‚ñà‚ñà‚ïî‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     
    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    {Colors.ENDC}                                                                        

    {Colors.GREEN}{Colors.BOLD}Tool t·ª± ƒë·ªông sinh ·∫£nh AI t·ª´ Freepik Pikaso{Colors.ENDC}
    """
    print(banner)


def validate_environment():
    """Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt"""
    load_dotenv()
    
    # Th·ª≠ ƒë·ªçc FREEPIK_COOKIE t·ª´ .env tr∆∞·ªõc
    freepik_cookie = os.getenv("FREEPIK_COOKIE")
    
    # N·∫øu kh√¥ng c√≥ trong .env ho·∫∑c ch·ªâ l√† placeholder, th·ª≠ ƒë·ªçc t·ª´ cookie_template.txt
    if not freepik_cookie or freepik_cookie == "placeholder_cookie":
        cookies = load_cookie_from_template()
        if cookies:
            print(f"{Colors.GREEN}‚úÖ ƒê√£ t√¨m th·∫•y cookie trong cookie_template.txt{Colors.ENDC}")
            return True
        else:
            print(f"{Colors.FAIL}L·ªói: Cookie kh√¥ng t√¨m th·∫•y trong .env ho·∫∑c cookie_template.txt{Colors.ENDC}")
            print(f"{Colors.WARNING}Vui l√≤ng c·∫≠p nh·∫≠t cookie trong cookie_template.txt{Colors.ENDC}")
            return False
    else:
        print(f"{Colors.GREEN}‚úÖ ƒê√£ t√¨m th·∫•y cookie trong .env{Colors.ENDC}")
        
    return True


def create_output_dir():
    """T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i"""
    output_dir = os.path.join(os.getcwd(), "output")
    os.makedirs(output_dir, exist_ok=True)
    return output_dir

def load_cookie_from_template():
    """Load cookie t·ª´ cookie_template.txt"""
    try:
        if os.path.exists("cookie_template.txt"):
            with open("cookie_template.txt", "r", encoding="utf-8") as f:
                content = f.read()
                
            # T√¨m ph·∫ßn cookie JSON
            start_marker = "=== PASTE COOKIE JSON V√ÄO ƒê√ÇY ==="
            end_marker = "=== K·∫æT TH√öC COOKIE ==="
            
            start_idx = content.find(start_marker)
            end_idx = content.find(end_marker)
            
            print(f"üîç Debug: start_marker found at {start_idx}, end_marker at {end_idx}")
            
            if start_idx != -1 and end_idx != -1:
                cookie_json = content[start_idx + len(start_marker):end_idx].strip()
                print(f"üîç Debug: Extracted cookie_json length: {len(cookie_json)}")
                print(f"üîç Debug: Cookie starts with '[': {cookie_json.startswith('[') if cookie_json else False}")
                
                if cookie_json and cookie_json.startswith('['):
                    cookies = json.loads(cookie_json)
                    print(f"üîç Debug: Parsed {len(cookies)} cookies from JSON")
                    
                    # Fix sameSite values ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi Playwright
                    for cookie in cookies:
                        if 'sameSite' in cookie:
                            if cookie['sameSite'] == 'no_restriction':
                                cookie['sameSite'] = 'None'
                            elif cookie['sameSite'] not in ['Strict', 'Lax', 'None']:
                                cookie['sameSite'] = 'Lax'  # Default safe value
                        
                        # Remove c√°c fields kh√¥ng c·∫ßn thi·∫øt cho Playwright
                        unwanted_fields = ['firstPartyDomain', 'partitionKey', 'storeId', 'hostOnly']
                        for field in unwanted_fields:
                            cookie.pop(field, None)
                            
                        # Rename expirationDate th√†nh expires n·∫øu c√≥
                        if 'expirationDate' in cookie:
                            cookie['expires'] = cookie.pop('expirationDate')
                    
                    print(f"üîç Debug: Returning {len(cookies)} processed cookies")
                    return cookies
                else:
                    print(f"üîç Debug: Cookie JSON invalid or empty")
            else:
                print(f"üîç Debug: Markers not found in template")
        else:
            print(f"üîç Debug: cookie_template.txt not found")
        return []
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi load cookie: {e}")
        return []


def process_single_image(prompt_item: Dict, show_browser: bool, cookies: List[Dict]) -> Optional[str]:
    """X·ª≠ l√Ω m·ªôt prompt image ƒë∆°n l·∫ª v·ªõi c·∫£i ti·∫øn m·ªõi"""
    try:
        generator = FreepikImageGenerator(headless=not show_browser)
        
        # L·∫•y th√¥ng tin t·ª´ prompt_item
        prompt = prompt_item.get('content', '')
        num_images = prompt_item.get('num_images', 4)  # M·∫∑c ƒë·ªãnh 4 ·∫£nh
        download_count = prompt_item.get('download_count')  # None = t·∫£i t·∫•t c·∫£
        filename_prefix = prompt_item.get('filename_prefix')
        
        if not prompt:
            print("‚ùå Prompt r·ªóng")
            return None
            
        # Convert cookies th√†nh string format cho generator
        cookie_string = json.dumps(cookies) if cookies else None
        
        # Sinh ·∫£nh v·ªõi c√°c t√πy ch·ªçn m·ªõi
        downloaded_files = generator.generate_image(
            prompt=prompt,
            cookie_string=cookie_string,
            num_images=num_images,
            download_count=download_count,
            filename_prefix=filename_prefix
        )
        
        # Tr·∫£ v·ªÅ file ƒë·∫ßu ti√™n n·∫øu c√≥ (ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©)
        return downloaded_files[0] if downloaded_files else None
        
    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω image: {e}")
        return None


def process_single_image_batch(prompt_item: Dict, show_browser: bool, cookies: List[Dict]) -> List[str]:
    """X·ª≠ l√Ω m·ªôt prompt image v√† tr·∫£ v·ªÅ list t·∫•t c·∫£ ·∫£nh ƒë√£ t·∫£i"""
    try:
        generator = FreepikImageGenerator(headless=not show_browser)
        
        prompt = prompt_item.get('content', '')
        num_images = prompt_item.get('num_images', 4)
        download_count = prompt_item.get('download_count')
        filename_prefix = prompt_item.get('filename_prefix')
        
        if not prompt:
            return []
            
        cookie_string = json.dumps(cookies) if cookies else None
        
        downloaded_files = generator.generate_image(
            prompt=prompt,
            cookie_string=cookie_string,
            num_images=num_images,
            download_count=download_count,
            filename_prefix=filename_prefix
        )
        
        return downloaded_files or []
        
    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω image batch: {e}")
        return []



def process_file_prompt(file_path: str, generate_image: bool, show_browser: bool):
    """X·ª≠ l√Ω prompt t·ª´ file"""
    try:
        print(f"{Colors.BLUE}ƒêang ƒë·ªçc prompt t·ª´ file: {file_path}{Colors.ENDC}")
        prompt_data = PromptLoader.load_prompt(file_path)
        
        output_dir = create_output_dir()
        results = {}
        
        # Sinh ·∫£nh n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if generate_image:
            image_prompt = prompt_data.get("image_prompt", "")
            print(f"{Colors.GREEN}ƒêang sinh ·∫£nh v·ªõi prompt: {image_prompt[:50]}...{Colors.ENDC}")
            print(f"üé® B·∫Øt ƒë·∫ßu sinh 4 ·∫£nh, t·∫£i v·ªÅ 4 ·∫£nh")
            print(f"üìù Prompt: {image_prompt}")
            
            # Load cookie t·ª´ template
            cookies = load_cookie_from_template()
            
            # T·∫°o prompt item format m·ªõi
            prompt_item = {
                'content': image_prompt,
                'num_images': 4,
                'download_count': 4,
                'filename_prefix': 'sample'
            }
            
            # S·ª≠ d·ª•ng process_single_image_batch
            downloaded_files = process_single_image_batch(prompt_item, show_browser, cookies)
            
            if downloaded_files:
                results["image_paths"] = downloaded_files
                results["image_path"] = downloaded_files[0]  # ƒê·ªÉ t∆∞∆°ng th√≠ch code c≈©
        

        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        print(f"\n{Colors.BLUE}{Colors.BOLD}K·∫æT QU·∫¢:{Colors.ENDC}")
        if "image_path" in results:
            print(f"{Colors.GREEN}‚úì ·∫¢nh ƒë∆∞·ª£c l∆∞u t·∫°i: {results['image_path']}{Colors.ENDC}")
        
        if not results:
            print(f"{Colors.WARNING}Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o ƒë∆∞·ª£c t·∫°o ra.{Colors.ENDC}")
            
        return True
        
    except Exception as e:
        print(f"{Colors.FAIL}L·ªói khi x·ª≠ l√Ω file prompt: {str(e)}{Colors.ENDC}")
        if "--debug" in sys.argv:
            traceback.print_exc()
        return False


def process_ai_prompt(topic: str, generate_image: bool, show_browser: bool, num_images: int, download_count: Optional[int]):
    """X·ª≠ l√Ω prompt AI v·ªõi c·∫£i ti·∫øn l∆∞u file v√† fallback options"""
    try:
        # Kh·ªüi t·∫°o Gemini generator v·ªõi th∆∞ m·ª•c prompts
        print(f"üîÆ ƒêang sinh prompt AI t·ª´ ch·ªß ƒë·ªÅ: {topic}")
        
        # Ki·ªÉm tra API key tr∆∞·ªõc
        load_dotenv()
        gemini_api_key = os.getenv("GEMINI_API_KEY")
        if not gemini_api_key:
            print(f"{Colors.FAIL}‚ùå GEMINI_API_KEY kh√¥ng t√¨m th·∫•y trong file .env{Colors.ENDC}")
            print(f"{Colors.WARNING}üí° Gi·∫£i ph√°p thay th·∫ø:{Colors.ENDC}")
            print(f"{Colors.GREEN}1. L·∫•y API key m·ªõi t·∫°i: https://makersuite.google.com/app/apikey{Colors.ENDC}")
            print(f"{Colors.GREEN}2. Ho·∫∑c s·ª≠ d·ª•ng prompt th·ªß c√¥ng:{Colors.ENDC}")
            print(f"   python main.py file --file sample_prompts.json")
            return False
        
        try:
            gemini_generator = GeminiPromptGenerator(output_dir="prompts")
            
            # Sinh prompt v·ªõi t·ª± ƒë·ªông l∆∞u file
            prompt_data = gemini_generator.generate_prompt(topic, save_to_file=True)
            
            if not prompt_data:
                print("‚ùå Kh√¥ng th·ªÉ sinh prompt t·ª´ AI")
                return False
            
            print(f"‚úÖ ƒê√£ sinh prompt AI th√†nh c√¥ng!")
            print(f"üìÅ File prompt: {prompt_data.get('file_path', 'Unknown')}")
            print(f"üé® Image prompt: {prompt_data['image_prompt'][:100]}...")

            
        except Exception as gemini_error:
            error_msg = str(gemini_error)
            print(f"{Colors.FAIL}‚ùå L·ªói Gemini API: {error_msg}{Colors.ENDC}")
            
            # X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn
            if "quota" in error_msg.lower() or "exceeded" in error_msg.lower():
                print(f"\n{Colors.WARNING}üî• GEMINI API ƒê√É H·∫æT QUOTA MI·ªÑN PH√ç!{Colors.ENDC}")
                print(f"{Colors.BLUE}üí° C√ÅC GI·∫¢I PH√ÅP THAY TH·∫æ:{Colors.ENDC}")
                print(f"{Colors.GREEN}1. üîë T·∫°o API key m·ªõi:{Colors.ENDC}")
                print(f"   - Truy c·∫≠p: https://makersuite.google.com/app/apikey")
                print(f"   - T·∫°o project m·ªõi ho·∫∑c d√πng Google account kh√°c")
                print(f"   - Copy key m·ªõi v√†o file .env")
                print(f"\n{Colors.GREEN}2. üìù S·ª≠ d·ª•ng prompt c√≥ s·∫µn:{Colors.ENDC}")
                print(f"   python main.py file --file sample_prompts.json")
                print(f"\n{Colors.GREEN}3. üìã T·∫°o prompt th·ªß c√¥ng:{Colors.ENDC}")
                
                # T·∫°o prompt th·ªß c√¥ng ngay l·∫≠p t·ª©c
                manual_prompt = create_manual_prompt(topic)
                if manual_prompt:
                    prompt_data = manual_prompt
                    print(f"{Colors.GREEN}‚úÖ ƒê√£ t·∫°o prompt th·ªß c√¥ng th√†nh c√¥ng!{Colors.ENDC}")
                else:
                    return False
                    
            elif "api" in error_msg.lower() and "key" in error_msg.lower():
                print(f"\n{Colors.FAIL}üîë API Key kh√¥ng h·ª£p l·ªá!{Colors.ENDC}")
                print(f"{Colors.BLUE}üí° H∆∞·ªõng d·∫´n fix:{Colors.ENDC}")
                print(f"1. Ki·ªÉm tra GEMINI_API_KEY trong file .env")
                print(f"2. T·∫°o key m·ªõi t·∫°i: https://makersuite.google.com/app/apikey")
                return False
            else:
                print(f"\n{Colors.FAIL}‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {error_msg}{Colors.ENDC}")
                return False
        
        # Load cookies
        cookies = load_cookie_from_template()
        
        success_count = 0
        
        # X·ª≠ l√Ω sinh ·∫£nh
        if generate_image:
            try:
                print(f"\n{Colors.BLUE}üé® B·∫Øt ƒë·∫ßu sinh ·∫£nh...{Colors.ENDC}")
                
                # Chu·∫©n b·ªã prompt item v·ªõi c·∫•u h√¨nh n√¢ng cao
                global AI_GENERATION_CONFIG
                image_prompt_item = {
                    'content': prompt_data['image_prompt'],
                    'num_images': AI_GENERATION_CONFIG['num_images'],
                    'download_count': AI_GENERATION_CONFIG['download_count'],
                    'filename_prefix': f"{prompt_data.get('prompt_id', 'ai_generated')}_img"
                }
                
                downloaded_images = process_single_image_batch(image_prompt_item, show_browser, cookies)
                
                if downloaded_images:
                    success_count += 1
                    print(f"{Colors.GREEN}‚úÖ ƒê√£ sinh {len(downloaded_images)} ·∫£nh th√†nh c√¥ng{Colors.ENDC}")
                    for i, img_path in enumerate(downloaded_images, 1):
                        print(f"  {i}. {os.path.basename(img_path)}")
                else:
                    print(f"{Colors.FAIL}‚ùå Th·∫•t b·∫°i sinh ·∫£nh{Colors.ENDC}")
                    
            except Exception as e:
                print(f"{Colors.FAIL}‚ùå L·ªói sinh ·∫£nh: {e}{Colors.ENDC}")
        

        
        return success_count > 0
        
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå L·ªói x·ª≠ l√Ω AI prompt: {e}{Colors.ENDC}")
        return False

def create_manual_prompt(topic: str) -> Optional[Dict[str, Any]]:
    """T·∫°o prompt th·ªß c√¥ng khi Gemini API kh√¥ng ho·∫°t ƒë·ªông"""
    try:
        print(f"\n{Colors.BLUE}üõ†Ô∏è ƒêang t·∫°o prompt th·ªß c√¥ng cho: {topic}{Colors.ENDC}")
        
        # Template prompt c∆° b·∫£n d·ª±a tr√™n topic
        prompt_templates = {
            'm√®o': 'Cute orange cat sitting by the window, soft natural lighting, photorealistic, high quality, 4K',
            'ch√≥': 'Adorable puppy playing in garden, natural lighting, photorealistic, high quality, 4K',
            'c·∫£nh': 'Beautiful landscape with mountains and sky, golden hour lighting, cinematic, high quality, 4K',
            'poster': 'Modern minimalist poster design, clean layout, professional typography, contemporary style',
            'logo': 'Creative logo design, modern style, clean lines, professional appearance, vector art'
        }
        
        # T√¨m template ph√π h·ª£p
        selected_template = None
        topic_lower = topic.lower()
        
        for key, template in prompt_templates.items():
            if key in topic_lower:
                selected_template = template
                break
        
        # Fallback template n·∫øu kh√¥ng t√¨m th·∫•y
        if not selected_template:
            selected_template = f'High quality image of {topic}, professional photography, detailed, 4K resolution, natural lighting'
        
        # T·∫°o prompt data
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        prompt_data = {
            'image_prompt': selected_template,
            'topic': topic,
            'prompt_id': f'manual_{timestamp}',
            'generated_at': datetime.now().isoformat(),
            'generated_by': 'manual_fallback'
        }
        
        # L∆∞u v√†o file
        os.makedirs('prompts', exist_ok=True)
        safe_topic = "".join(c for c in topic[:30] if c.isalnum() or c in (' ', '-', '_')).strip()
        safe_topic = safe_topic.replace(' ', '_')
        
        filename = f"manual_{timestamp}_{safe_topic}.json"
        file_path = os.path.join('prompts', filename)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(prompt_data, f, ensure_ascii=False, indent=2)
        
        prompt_data['file_path'] = file_path
        
        print(f"üíæ ƒê√£ l∆∞u prompt th·ªß c√¥ng: {file_path}")
        return prompt_data
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o prompt th·ªß c√¥ng: {e}")
        return None


@click.group()
def cli():
    """FazzyTool - C√¥ng c·ª• d√≤ng l·ªánh"""
    pass

@cli.command()
@click.option('--file', '-f', type=str, help='ƒê∆∞·ªùng d·∫´n t·ªõi file prompt (.txt, .json, .docx)')
@click.option('--image/--no-image', default=True, help='Sinh ·∫£nh (m·∫∑c ƒë·ªãnh: True)')
@click.option('--show-browser/--headless', default=False, help='Hi·ªÉn th·ªã tr√¨nh duy·ªát (m·∫∑c ƒë·ªãnh: False)')
def file(file, image, show_browser):
    """Sinh ·∫£nh t·ª´ prompt trong file"""
    if not file:
        print(f"{Colors.FAIL}L·ªói: C·∫ßn cung c·∫•p file prompt qua --file.{Colors.ENDC}")
        return
        
    process_file_prompt(file, image, show_browser)

@cli.command()
@click.option('--topic', '-t', type=str, required=True, help='Ch·ªß ƒë·ªÅ ƒë·ªÉ sinh prompt (ti·∫øng Vi·ªát)')
@click.option('--image/--no-image', default=True, help='Sinh ·∫£nh (m·∫∑c ƒë·ªãnh: True)')
@click.option('--show-browser/--headless', default=False, help='Hi·ªÉn th·ªã tr√¨nh duy·ªát (m·∫∑c ƒë·ªãnh: False)')
@click.option('--download-count', default=None, type=int, help='S·ªë l∆∞·ª£ng ·∫£nh t·∫£i v·ªÅ (m·∫∑c ƒë·ªãnh: t·∫•t c·∫£)')
def ai(topic, image, show_browser, download_count):
    """Sinh prompt b·∫±ng AI v√† t√πy ch·ªçn sinh ·∫£nh/video."""
    if not validate_environment():
        return
    process_ai_prompt(topic, image, show_browser, 4, download_count)

@cli.command()
@click.option('--topics', '-t', multiple=True, help='Danh s√°ch ch·ªß ƒë·ªÅ (c√≥ th·ªÉ l·∫∑p l·∫°i nhi·ªÅu l·∫ßn)')
@click.option('--file', '-f', type=str, help='File ch·ª©a danh s√°ch ch·ªß ƒë·ªÅ (m·ªói d√≤ng m·ªôt ch·ªß ƒë·ªÅ)')
@click.option('--start-index', default=1, help='S·ªë th·ª© t·ª± b·∫Øt ƒë·∫ßu ƒë√°nh s·ªë prompt')
def ai_batch(topics, file, start_index):
    """Sinh nhi·ªÅu prompt AI t·ª´ danh s√°ch ch·ªß ƒë·ªÅ v√† l∆∞u th√†nh file c√≥ th·ª© t·ª±"""
    
    topic_list = list(topics)
    
    # ƒê·ªçc t·ª´ file n·∫øu c√≥
    if file:
        try:
            with open(file, 'r', encoding='utf-8') as f:
                topic_list.extend([line.strip() for line in f if line.strip()])
        except Exception as e:
            print(f"{Colors.FAIL}‚ùå L·ªói ƒë·ªçc file {file}: {e}{Colors.ENDC}")
            return
    
    if not topic_list:
        print(f"{Colors.FAIL}L·ªói: Kh√¥ng c√≥ ch·ªß ƒë·ªÅ n√†o ƒë·ªÉ x·ª≠ l√Ω.{Colors.ENDC}")
        return

    print(f"{Colors.BLUE}B·∫Øt ƒë·∫ßu t·∫°o batch {len(topic_list)} prompts...{Colors.ENDC}")
    
    # T·∫°o th∆∞ m·ª•c prompts n·∫øu ch∆∞a c√≥
    prompts_dir = "prompts"
    os.makedirs(prompts_dir, exist_ok=True)
    
    # T·∫°o c√°c prompts
    for i, topic in enumerate(topic_list, start=start_index):
        print(f"  {Colors.GREEN}ƒêang t·∫°o prompt {i} cho ch·ªß ƒë·ªÅ: '{topic}'...{Colors.ENDC}")
        try:
            create_manual_prompt(topic)
        except Exception as e:
            print(f"  {Colors.FAIL}L·ªói khi t·∫°o prompt cho '{topic}': {e}{Colors.ENDC}")
    
    print(f"\n{Colors.GREEN}‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng {len(topic_list)} file prompt trong th∆∞ m·ª•c '{prompts_dir}'.{Colors.ENDC}")
    print(f"{Colors.WARNING}S·ª≠ d·ª•ng 'python main.py batch' ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng lo·∫°t.{Colors.ENDC}")

@cli.command()
@click.option('--show-browser/--headless', default=False, help='Hi·ªÉn th·ªã tr√¨nh duy·ªát (m·∫∑c ƒë·ªãnh: False)')
@click.option('--dry-run', is_flag=True, help='Ch·ªâ xem th√¥ng tin batch m√† kh√¥ng th·ª±c thi')
def batch(show_browser, dry_run):
    """X·ª≠ l√Ω h√†ng lo·∫°t c√°c file prompt trong th∆∞ m·ª•c 'prompts'."""
    if not validate_environment():
        return
        
    prompts_dir = "prompts"
    if not os.path.exists(prompts_dir) or not os.listdir(prompts_dir):
        print(f"{Colors.FAIL}L·ªói: Th∆∞ m·ª•c '{prompts_dir}' kh√¥ng t·ªìn t·∫°i ho·∫∑c r·ªóng.{Colors.ENDC}")
        print(f"{Colors.WARNING}S·ª≠ d·ª•ng 'python main.py ai-batch' ƒë·ªÉ t·∫°o c√°c file prompt tr∆∞·ªõc.{Colors.ENDC}")
        return

    # Load cookie
    cookies = load_cookie_from_template()
    if not cookies:
        print(f"{Colors.FAIL}L·ªói: Kh√¥ng th·ªÉ load cookie. D·ª´ng th·ª±c thi.{Colors.ENDC}")
        return
        
    # Kh·ªüi t·∫°o BatchProcessor
    processor = BatchProcessor(
        prompts_dir=prompts_dir,
        show_browser=show_browser,
        cookies=cookies
    )
    
    # L·∫•y th√¥ng tin batch
    batch_info = processor.get_batch_info()
    
    print(f"\n{Colors.HEADER}{Colors.BOLD}--- BATCH PROCESSING ---{Colors.ENDC}")
    print(f"{Colors.BLUE}T√¨m th·∫•y {batch_info['total_files']} file prompt trong '{prompts_dir}'.{Colors.ENDC}")
    
    if not batch_info['total_files']:
        return
        
    # Hi·ªÉn th·ªã danh s√°ch file
    for file_info in batch_info['files']:
        status = f"{Colors.GREEN}‚úì{Colors.ENDC}" if file_info['exists'] else f"{Colors.FAIL}‚úó{Colors.ENDC}"
        print(f"  [{status}] {file_info['filename']} - Topic: {file_info.get('topic', 'N/A')}")
        
    if dry_run:
        print(f"\n{Colors.WARNING}--dry-run ch·∫ø ƒë·ªô ON. K·∫øt th√∫c m√† kh√¥ng th·ª±c thi.{Colors.ENDC}")
        return
        
    # X√°c nh·∫≠n th·ª±c thi
    if not click.confirm(f"\n{Colors.WARNING}B·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu x·ª≠ l√Ω {batch_info['total_files']} file kh√¥ng?{Colors.ENDC}", default=True):
        print("ƒê√£ h·ªßy.")
        return
        
    # Th·ª±c thi batch
    processor.run_batch()
    
    print(f"\n{Colors.GREEN}{Colors.BOLD}--- HO√ÄN TH√ÄNH BATCH ---{Colors.ENDC}")

@cli.command()
def setup():
    """H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t v√† c·∫•u h√¨nh m√¥i tr∆∞·ªùng."""
    print(f"\n{Colors.HEADER}{Colors.BOLD}--- H∆Ø·ªöNG D·∫™N C√ÄI ƒê·∫∂T FAZZYTOOL ---{Colors.ENDC}")
    print(f"1. {Colors.BLUE}C·∫≠p nh·∫≠t file .env v·ªõi API key c·ªßa Gemini v√† cookie c·ªßa Freepik Premium{Colors.ENDC}")
    print(f"2. {Colors.BLUE}S·ª≠ d·ª•ng l·ªánh 'python main.py ai --topic \"ch·ªß ƒë·ªÅ c·ªßa b·∫°n\"' ƒë·ªÉ sinh n·ªôi dung b·∫±ng AI{Colors.ENDC}")
    print(f"3. {Colors.BLUE}Ho·∫∑c, s·ª≠ d·ª•ng l·ªánh 'python main.py file --file path/to/prompt.json' ƒë·ªÉ sinh t·ª´ file s·∫µn c√≥{Colors.ENDC}")
    print(f"4. {Colors.BLUE}K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c output/{Colors.ENDC}")
    print(f"5. {Colors.BLUE}Ch·∫°y tool:{Colors.ENDC} python main.py --help")

@cli.command()
def test():
    """
    Ch·∫°y test nhanh ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng sinh ·∫£nh/video.
    S·ª≠ d·ª•ng prompt m·∫´u 'sample_prompts.json'.
    """
    if not validate_environment():
        return

    print(f"{Colors.BLUE}B·∫Øt ƒë·∫ßu ch·∫°y test...{Colors.ENDC}")
    
    # ƒê∆∞·ªùng d·∫´n file test
    test_file = "sample_prompts.json"
    
    if not os.path.exists(test_file):
        print(f"{Colors.FAIL}L·ªói: Kh√¥ng t√¨m th·∫•y file test '{test_file}'.{Colors.ENDC}")
        return
        
    # ƒê·ªçc prompt t·ª´ file test
    try:
        with open(test_file, 'r', encoding='utf-8') as f:
            prompt_data = json.load(f)
    except Exception as e:
        print(f"{Colors.FAIL}L·ªói khi ƒë·ªçc file test: {e}{Colors.ENDC}")
        return
        
    # Load cookie
    cookies = load_cookie_from_template()
    if not cookies:
        print(f"{Colors.FAIL}Kh√¥ng th·ªÉ load cookie. D·ª´ng test.{Colors.ENDC}")
        return
        
    # --- Test Image Generation ---
    print(f"\n{Colors.HEADER}--- Testing Image Generation ---{Colors.ENDC}")
    image_prompt = prompt_data.get("image_prompt", "")
    if image_prompt:
        print(f"üìù Prompt ·∫£nh: {image_prompt}")
        
        # T·∫°o prompt item
        image_prompt_item = {
            'content': image_prompt,
            'num_images': 4,
            'download_count': 1,  # Ch·ªâ t·∫£i 1 ·∫£nh ƒë·ªÉ test
            'filename_prefix': 'test_image'
        }
        
        # Ch·∫°y v·ªõi browser hi·ªÉn th·ªã
        downloaded_images = process_single_image_batch(image_prompt_item, True, cookies)
        
        if downloaded_images:
            print(f"{Colors.GREEN}‚úÖ Test ·∫£nh TH√ÄNH C√îNG. ƒê√£ t·∫£i {len(downloaded_images)} ·∫£nh.{Colors.ENDC}")
        else:
            print(f"{Colors.FAIL}‚ùå Test ·∫£nh TH·∫§T B·∫†I.{Colors.ENDC}")
    else:
        print(f"{Colors.WARNING}Kh√¥ng t√¨m th·∫•y image_prompt trong file test.{Colors.ENDC}")

    print(f"\n{Colors.GREEN}{Colors.BOLD}--- K·∫æT TH√öC TEST ---{Colors.ENDC}")

@cli.command()
@click.option('--prompt', '-p', default='test cookie v·ªõi prompt debug', help='Prompt ƒë·ªÉ test (m·∫∑c ƒë·ªãnh: test cookie v·ªõi prompt debug)')
@click.option('--show-browser/--headless', default=False, help='Hi·ªÉn th·ªã tr√¨nh duy·ªát (m·∫∑c ƒë·ªãnh: False)')
@click.option('--download-count', default=None, type=int, help='S·ªë l∆∞·ª£ng ·∫£nh t·∫£i v·ªÅ (m·∫∑c ƒë·ªãnh: t·∫•t c·∫£)')
@click.option('--filename-prefix', type=str, help='Ti·ªÅn t·ªë t√™n file ·∫£nh')
def image(file, topic, prompt, num_images, download_count, filename_prefix, show_browser):
    """
    Sinh ·∫£nh t·ª´ nhi·ªÅu ngu·ªìn: file, topic (AI), ho·∫∑c prompt tr·ª±c ti·∫øp.
    ƒê√¢y l√† l·ªánh ch√≠nh ƒë·ªÉ t·∫°o ·∫£nh.
    """
    if not validate_environment():
        return
        
    # X√°c ƒë·ªãnh ngu·ªìn prompt
    prompt_source_count = sum([1 for var in [file, topic, prompt] if var])
    if prompt_source_count > 1:
        print(f"{Colors.FAIL}L·ªói: Ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt ngu·ªìn prompt (--file, --topic, ho·∫∑c --prompt).{Colors.ENDC}")
        return
    if prompt_source_count == 0:
        print(f"{Colors.FAIL}L·ªói: Ph·∫£i cung c·∫•p m·ªôt ngu·ªìn prompt (--file, --topic, ho·∫∑c --prompt).{Colors.ENDC}")
        return

    # Load cookie
    cookies = load_cookie_from_template()
    if not cookies:
        print(f"{Colors.FAIL}L·ªói: Kh√¥ng th·ªÉ load cookie.{Colors.ENDC}")
        return

    final_prompt = ""
    
    # X·ª≠ l√Ω prompt t·ª´ file
    if file:
        try:
            prompt_data = PromptLoader.load_prompt(file)
            final_prompt = prompt_data.get("image_prompt", "")
            if not filename_prefix:
                filename_prefix = Path(file).stem
        except Exception as e:
            print(f"{Colors.FAIL}L·ªói khi x·ª≠ l√Ω file prompt: {e}{Colors.ENDC}")
            return
            
    # X·ª≠ l√Ω prompt t·ª´ topic (AI)
    elif topic:
        try:
            print(f"{Colors.BLUE}ƒêang sinh prompt t·ª´ topic: '{topic}'...{Colors.ENDC}")
            gemini_generator = GeminiPromptGenerator()
            prompt_data = gemini_generator.generate_prompt(topic, save_to_file=False)
            if prompt_data:
                final_prompt = prompt_data.get("image_prompt", "")
                if not filename_prefix:
                    safe_topic = "".join(c for c in topic if c.isalnum() or c in (' ', '-', '_')).strip().replace(' ', '_')
                    filename_prefix = f"ai_{safe_topic[:20]}"
            else:
                raise Exception("Gemini kh√¥ng tr·∫£ v·ªÅ prompt.")
        except Exception as e:
            print(f"{Colors.FAIL}L·ªói khi sinh prompt b·∫±ng AI: {e}{Colors.ENDC}")
            return
    
    # X·ª≠ l√Ω prompt tr·ª±c ti·∫øp
    elif prompt:
        final_prompt = prompt
        if not filename_prefix:
            filename_prefix = "".join(c for c in prompt[:20] if c.isalnum() or c in (' ', '-', '_')).strip().replace(' ', '_')

    # Ki·ªÉm tra l·∫°i prompt cu·ªëi c√πng
    if not final_prompt:
        print(f"{Colors.FAIL}L·ªói: Kh√¥ng c√≥ prompt n√†o ƒë·ªÉ x·ª≠ l√Ω.{Colors.ENDC}")
        return
        
    print(f"\n{Colors.HEADER}--- B·∫ÆT ƒê·∫¶U SINH ·∫¢NH ---{Colors.ENDC}")
    print(f"üìù Prompt: {Colors.BOLD}{final_prompt}{Colors.ENDC}")
    print(f"‚öôÔ∏è  C·∫•u h√¨nh: Sinh {num_images} ·∫£nh, t·∫£i v·ªÅ {download_count or 't·∫•t c·∫£'}")
    
    # T·∫°o prompt item
    prompt_item = {
        'content': final_prompt,
        'num_images': num_images,
        'download_count': download_count,
        'filename_prefix': filename_prefix or 'image'
    }
    
    # X·ª≠ l√Ω
    downloaded_files = process_single_image_batch(prompt_item, show_browser, cookies)
    
    if downloaded_files:
        print(f"\n{Colors.GREEN}‚úÖ HO√ÄN TH√ÄNH! ƒê√£ t·∫£i {len(downloaded_files)} ·∫£nh:{Colors.ENDC}")
        for f in downloaded_files:
            print(f"  - {f}")
    else:
        print(f"\n{Colors.FAIL}‚ùå TH·∫§T B·∫†I! Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c t·∫°o.{Colors.ENDC}")


if __name__ == "__main__":
    try:
        # Check m√¥i tr∆∞·ªùng tr∆∞·ªõc khi ch·∫°y CLI
        # if validate_environment():
        print_banner()
        cli()
    except Exception as e:
        print(f"\n{Colors.FAIL}{Colors.BOLD}L·ªói kh√¥ng x√°c ƒë·ªãnh:{Colors.ENDC}")
        print(f"M·ªôt l·ªói nghi√™m tr·ªçng ƒë√£ x·∫£y ra: {e}")
        print("\n--- TRACEBACK ---")
        traceback.print_exc()
        sys.exit(1) 