#!/usr/bin/env python3
"""
FAZZYTOOL - C√¥ng c·ª• t·ª± ƒë·ªông sinh ·∫£nh v√† video b·∫±ng Freepik AI

Tool n√†y t·ª± ƒë·ªông h√≥a vi·ªác sinh ·∫£nh v√† video tr√™n n·ªÅn t·∫£ng Freepik Pikaso
th√¥ng qua tr√¨nh duy·ªát t·ª± ƒë·ªông, d·ª±a tr√™n prompt do ng∆∞·ªùi d√πng ho·∫∑c Gemini API sinh ra.
"""

import os
import sys
import json
import click
import traceback
from pathlib import Path
from typing import Dict, Any, Optional, List
from datetime import datetime
from dotenv import load_dotenv

from prompt_loader import PromptLoader
from gemini_prompt import GeminiPromptGenerator
from browser_image import FreepikImageGenerator
from browser_video import FreepikVideoGenerator
from batch_processor import BatchProcessor

# Global configuration cho AI generation
AI_GENERATION_CONFIG = {
    'num_images': 4,
    'download_count': 2
}

# M√†u s·∫Øc cho terminal
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'


def print_banner():
    """In banner c·ªßa tool"""
    banner = f"""
    {Colors.BLUE}{Colors.BOLD}
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ïö‚ñà‚ñà‚ïî‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     
    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    {Colors.ENDC}                                                                        

    {Colors.GREEN}{Colors.BOLD}Tool t·ª± ƒë·ªông sinh ·∫£nh v√† video AI t·ª´ Freepik Pikaso{Colors.ENDC}
    """
    print(banner)


def validate_environment():
    """Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt"""
    load_dotenv()
    
    # Th·ª≠ ƒë·ªçc FREEPIK_COOKIE t·ª´ .env tr∆∞·ªõc
    freepik_cookie = os.getenv("FREEPIK_COOKIE")
    
    # N·∫øu kh√¥ng c√≥ trong .env ho·∫∑c ch·ªâ l√† placeholder, th·ª≠ ƒë·ªçc t·ª´ cookie_template.txt
    if not freepik_cookie or freepik_cookie == "placeholder_cookie":
        cookies = load_cookie_from_template()
        if cookies:
            print(f"{Colors.GREEN}‚úÖ ƒê√£ t√¨m th·∫•y cookie trong cookie_template.txt{Colors.ENDC}")
            return True
        else:
            print(f"{Colors.FAIL}L·ªói: Cookie kh√¥ng t√¨m th·∫•y trong .env ho·∫∑c cookie_template.txt{Colors.ENDC}")
            print(f"{Colors.WARNING}Vui l√≤ng c·∫≠p nh·∫≠t cookie trong cookie_template.txt{Colors.ENDC}")
            return False
    else:
        print(f"{Colors.GREEN}‚úÖ ƒê√£ t√¨m th·∫•y cookie trong .env{Colors.ENDC}")
        
    return True


def create_output_dir():
    """T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i"""
    output_dir = os.path.join(os.getcwd(), "output")
    os.makedirs(output_dir, exist_ok=True)
    return output_dir

def load_cookie_from_template():
    """Load cookie t·ª´ cookie_template.txt"""
    try:
        if os.path.exists("cookie_template.txt"):
            with open("cookie_template.txt", "r", encoding="utf-8") as f:
                content = f.read()
                
            # T√¨m ph·∫ßn cookie JSON
            start_marker = "=== PASTE COOKIE JSON V√ÄO ƒê√ÇY ==="
            end_marker = "=== K·∫æT TH√öC COOKIE ==="
            
            start_idx = content.find(start_marker)
            end_idx = content.find(end_marker)
            
            print(f"üîç Debug: start_marker found at {start_idx}, end_marker at {end_idx}")
            
            if start_idx != -1 and end_idx != -1:
                cookie_json = content[start_idx + len(start_marker):end_idx].strip()
                print(f"üîç Debug: Extracted cookie_json length: {len(cookie_json)}")
                print(f"üîç Debug: Cookie starts with '[': {cookie_json.startswith('[') if cookie_json else False}")
                
                if cookie_json and cookie_json.startswith('['):
                    cookies = json.loads(cookie_json)
                    print(f"üîç Debug: Parsed {len(cookies)} cookies from JSON")
                    
                    # Fix sameSite values ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi Playwright
                    for cookie in cookies:
                        if 'sameSite' in cookie:
                            if cookie['sameSite'] == 'no_restriction':
                                cookie['sameSite'] = 'None'
                            elif cookie['sameSite'] not in ['Strict', 'Lax', 'None']:
                                cookie['sameSite'] = 'Lax'  # Default safe value
                        
                        # Remove c√°c fields kh√¥ng c·∫ßn thi·∫øt cho Playwright
                        unwanted_fields = ['firstPartyDomain', 'partitionKey', 'storeId', 'hostOnly']
                        for field in unwanted_fields:
                            cookie.pop(field, None)
                            
                        # Rename expirationDate th√†nh expires n·∫øu c√≥
                        if 'expirationDate' in cookie:
                            cookie['expires'] = cookie.pop('expirationDate')
                    
                    print(f"üîç Debug: Returning {len(cookies)} processed cookies")
                    return cookies
                else:
                    print(f"üîç Debug: Cookie JSON invalid or empty")
            else:
                print(f"üîç Debug: Markers not found in template")
        else:
            print(f"üîç Debug: cookie_template.txt not found")
        return []
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi load cookie: {e}")
        return []


def process_single_image(prompt_item: Dict, show_browser: bool, cookies: List[Dict]) -> Optional[str]:
    """X·ª≠ l√Ω m·ªôt prompt image ƒë∆°n l·∫ª v·ªõi c·∫£i ti·∫øn m·ªõi"""
    try:
        generator = FreepikImageGenerator(headless=not show_browser)
        
        # L·∫•y th√¥ng tin t·ª´ prompt_item
        prompt = prompt_item.get('content', '')
        num_images = prompt_item.get('num_images', 4)  # M·∫∑c ƒë·ªãnh 4 ·∫£nh
        download_count = prompt_item.get('download_count')  # None = t·∫£i t·∫•t c·∫£
        filename_prefix = prompt_item.get('filename_prefix')
        
        if not prompt:
            print("‚ùå Prompt r·ªóng")
            return None
            
        # Convert cookies th√†nh string format cho generator
        cookie_string = json.dumps(cookies) if cookies else None
        
        # Sinh ·∫£nh v·ªõi c√°c t√πy ch·ªçn m·ªõi
        downloaded_files = generator.generate_image(
            prompt=prompt,
            cookie_string=cookie_string,
            num_images=num_images,
            download_count=download_count,
            filename_prefix=filename_prefix
        )
        
        # Tr·∫£ v·ªÅ file ƒë·∫ßu ti√™n n·∫øu c√≥ (ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©)
        return downloaded_files[0] if downloaded_files else None
        
    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω image: {e}")
        return None


def process_single_image_batch(prompt_item: Dict, show_browser: bool, cookies: List[Dict]) -> List[str]:
    """X·ª≠ l√Ω m·ªôt prompt image v√† tr·∫£ v·ªÅ list t·∫•t c·∫£ ·∫£nh ƒë√£ t·∫£i"""
    try:
        generator = FreepikImageGenerator(headless=not show_browser)
        
        prompt = prompt_item.get('content', '')
        num_images = prompt_item.get('num_images', 4)
        download_count = prompt_item.get('download_count')
        filename_prefix = prompt_item.get('filename_prefix')
        
        if not prompt:
            return []
            
        cookie_string = json.dumps(cookies) if cookies else None
        
        downloaded_files = generator.generate_image(
            prompt=prompt,
            cookie_string=cookie_string,
            num_images=num_images,
            download_count=download_count,
            filename_prefix=filename_prefix
        )
        
        return downloaded_files or []
        
    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω image batch: {e}")
        return []


def process_single_video_from_image(prompt_item: Dict, image_path: str, show_browser: bool, cookies: List[Dict]) -> Optional[str]:
    """X·ª≠ l√Ω t·∫°o m·ªôt video t·ª´ ·∫£nh v√† prompt item"""
    try:
        from browser_video import FreepikVideoGenerator
        
        output_dir = create_output_dir()
        video_generator = FreepikVideoGenerator(headless=(not show_browser), output_dir=output_dir)
        
        # Chuy·ªÉn cookies th√†nh string format
        cookie_string = json.dumps(cookies) if cookies else None
        
        # L·∫•y th√¥ng tin video t·ª´ prompt item
        duration = prompt_item.get('duration', '5s')
        ratio = prompt_item.get('ratio', '1:1')
        
        video_path = video_generator.generate_video_from_image(
            image_path=image_path,
            prompt=prompt_item['content'],
            cookie_string=cookie_string,
            duration=duration,
            ratio=ratio
        )
        return video_path
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o video: {e}")
        return None


def process_file_prompt(file_path: str, generate_image: bool, generate_video: bool, show_browser: bool):
    """X·ª≠ l√Ω prompt t·ª´ file"""
    try:
        print(f"{Colors.BLUE}ƒêang ƒë·ªçc prompt t·ª´ file: {file_path}{Colors.ENDC}")
        prompt_data = PromptLoader.load_prompt(file_path)
        
        output_dir = create_output_dir()
        results = {}
        
        # Sinh ·∫£nh n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if generate_image:
            image_prompt = prompt_data.get("image_prompt", "")
            print(f"{Colors.GREEN}ƒêang sinh ·∫£nh v·ªõi prompt: {image_prompt[:50]}...{Colors.ENDC}")
            print(f"üé® B·∫Øt ƒë·∫ßu sinh 4 ·∫£nh, t·∫£i v·ªÅ 4 ·∫£nh")
            print(f"üìù Prompt: {image_prompt}")
            
            # Load cookie t·ª´ template
            cookies = load_cookie_from_template()
            
            # T·∫°o prompt item format m·ªõi
            prompt_item = {
                'content': image_prompt,
                'num_images': 4,
                'download_count': 4,
                'filename_prefix': 'sample'
            }
            
            # S·ª≠ d·ª•ng process_single_image_batch
            downloaded_files = process_single_image_batch(prompt_item, show_browser, cookies)
            
            if downloaded_files:
                results["image_paths"] = downloaded_files
                results["image_path"] = downloaded_files[0]  # ƒê·ªÉ t∆∞∆°ng th√≠ch code c≈©
        
        # Sinh video n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if generate_video:
            video_prompt = prompt_data.get("video_prompt", "")
            video_duration = prompt_data.get("video_duration", "5s")
            video_ratio = prompt_data.get("video_ratio", "1:1")
            
            print(f"{Colors.GREEN}ƒêang sinh video v·ªõi prompt: {video_prompt[:50]}...{Colors.ENDC}")
            print(f"{Colors.GREEN}Th·ªùi l∆∞·ª£ng: {video_duration}, T·ª∑ l·ªá: {video_ratio}{Colors.ENDC}")
            
            # Load cookies
            cookies = load_cookie_from_template()
            cookie_string = json.dumps(cookies) if cookies else None
            
            video_generator = FreepikVideoGenerator(headless=(not show_browser), output_dir=output_dir)
            video_path = video_generator.generate_video(
                video_prompt, 
                duration=video_duration,
                ratio=video_ratio,
                cookie_string=cookie_string
            )
            
            if video_path:
                results["video_path"] = video_path
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        print(f"\n{Colors.BLUE}{Colors.BOLD}K·∫æT QU·∫¢:{Colors.ENDC}")
        if "image_path" in results:
            print(f"{Colors.GREEN}‚úì ·∫¢nh ƒë∆∞·ª£c l∆∞u t·∫°i: {results['image_path']}{Colors.ENDC}")
        if "video_path" in results:
            print(f"{Colors.GREEN}‚úì Video ƒë∆∞·ª£c l∆∞u t·∫°i: {results['video_path']}{Colors.ENDC}")
        
        if not results:
            print(f"{Colors.WARNING}Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o ƒë∆∞·ª£c t·∫°o.{Colors.ENDC}")
            
        return True
        
    except Exception as e:
        print(f"{Colors.FAIL}L·ªói khi x·ª≠ l√Ω file prompt: {str(e)}{Colors.ENDC}")
        if "--debug" in sys.argv:
            traceback.print_exc()
        return False


def process_ai_prompt(topic: str, generate_image: bool, generate_video: bool, show_browser: bool):
    """X·ª≠ l√Ω prompt AI v·ªõi c·∫£i ti·∫øn l∆∞u file v√† fallback options"""
    try:
        # Kh·ªüi t·∫°o Gemini generator v·ªõi th∆∞ m·ª•c prompts
        print(f"üîÆ ƒêang sinh prompt AI t·ª´ ch·ªß ƒë·ªÅ: {topic}")
        
        # Ki·ªÉm tra API key tr∆∞·ªõc
        load_dotenv()
        gemini_api_key = os.getenv("GEMINI_API_KEY")
        if not gemini_api_key:
            print(f"{Colors.FAIL}‚ùå GEMINI_API_KEY kh√¥ng t√¨m th·∫•y trong file .env{Colors.ENDC}")
            print(f"{Colors.WARNING}üí° Gi·∫£i ph√°p thay th·∫ø:{Colors.ENDC}")
            print(f"{Colors.GREEN}1. L·∫•y API key m·ªõi t·∫°i: https://makersuite.google.com/app/apikey{Colors.ENDC}")
            print(f"{Colors.GREEN}2. Ho·∫∑c s·ª≠ d·ª•ng prompt th·ªß c√¥ng:{Colors.ENDC}")
            print(f"   python main.py file --file sample_prompts.json")
            return False
        
        try:
            gemini_generator = GeminiPromptGenerator(output_dir="prompts")
            
            # Sinh prompt v·ªõi t·ª± ƒë·ªông l∆∞u file
            prompt_data = gemini_generator.generate_prompt(topic, save_to_file=True)
            
            if not prompt_data:
                print("‚ùå Kh√¥ng th·ªÉ sinh prompt t·ª´ AI")
                return False
            
            print(f"‚úÖ ƒê√£ sinh prompt AI th√†nh c√¥ng!")
            print(f"üìÅ File prompt: {prompt_data.get('file_path', 'Unknown')}")
            print(f"üé® Image prompt: {prompt_data['image_prompt'][:100]}...")
            print(f"üé¨ Video prompt: {prompt_data['video_prompt'][:100]}...")
            
        except Exception as gemini_error:
            error_msg = str(gemini_error)
            print(f"{Colors.FAIL}‚ùå L·ªói Gemini API: {error_msg}{Colors.ENDC}")
            
            # X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn
            if "quota" in error_msg.lower() or "exceeded" in error_msg.lower():
                print(f"\n{Colors.WARNING}üî• GEMINI API ƒê√É H·∫æT QUOTA MI·ªÑN PH√ç!{Colors.ENDC}")
                print(f"{Colors.BLUE}üí° C√ÅC GI·∫¢I PH√ÅP THAY TH·∫æ:{Colors.ENDC}")
                print(f"{Colors.GREEN}1. üîë T·∫°o API key m·ªõi:{Colors.ENDC}")
                print(f"   - Truy c·∫≠p: https://makersuite.google.com/app/apikey")
                print(f"   - T·∫°o project m·ªõi ho·∫∑c d√πng Google account kh√°c")
                print(f"   - Copy key m·ªõi v√†o file .env")
                print(f"\n{Colors.GREEN}2. üìù S·ª≠ d·ª•ng prompt c√≥ s·∫µn:{Colors.ENDC}")
                print(f"   python main.py file --file sample_prompts.json")
                print(f"\n{Colors.GREEN}3. üìã T·∫°o prompt th·ªß c√¥ng:{Colors.ENDC}")
                
                # T·∫°o prompt th·ªß c√¥ng ngay l·∫≠p t·ª©c
                manual_prompt = create_manual_prompt(topic)
                if manual_prompt:
                    prompt_data = manual_prompt
                    print(f"{Colors.GREEN}‚úÖ ƒê√£ t·∫°o prompt th·ªß c√¥ng th√†nh c√¥ng!{Colors.ENDC}")
                else:
                    return False
                    
            elif "api" in error_msg.lower() and "key" in error_msg.lower():
                print(f"\n{Colors.FAIL}üîë API Key kh√¥ng h·ª£p l·ªá!{Colors.ENDC}")
                print(f"{Colors.BLUE}üí° H∆∞·ªõng d·∫´n fix:{Colors.ENDC}")
                print(f"1. Ki·ªÉm tra GEMINI_API_KEY trong file .env")
                print(f"2. T·∫°o key m·ªõi t·∫°i: https://makersuite.google.com/app/apikey")
                return False
            else:
                print(f"\n{Colors.FAIL}‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {error_msg}{Colors.ENDC}")
                return False
        
        # Load cookies
        cookies = load_cookie_from_template()
        
        success_count = 0
        
        # X·ª≠ l√Ω sinh ·∫£nh
        if generate_image:
            try:
                print(f"\n{Colors.BLUE}üé® B·∫Øt ƒë·∫ßu sinh ·∫£nh...{Colors.ENDC}")
                
                # Chu·∫©n b·ªã prompt item v·ªõi c·∫•u h√¨nh n√¢ng cao
                global AI_GENERATION_CONFIG
                image_prompt_item = {
                    'content': prompt_data['image_prompt'],
                    'num_images': AI_GENERATION_CONFIG['num_images'],
                    'download_count': AI_GENERATION_CONFIG['download_count'],
                    'filename_prefix': f"{prompt_data.get('prompt_id', 'ai_generated')}_img"
                }
                
                downloaded_images = process_single_image_batch(image_prompt_item, show_browser, cookies)
                
                if downloaded_images:
                    success_count += 1
                    print(f"{Colors.GREEN}‚úÖ ƒê√£ sinh {len(downloaded_images)} ·∫£nh th√†nh c√¥ng{Colors.ENDC}")
                    for i, img_path in enumerate(downloaded_images, 1):
                        print(f"  {i}. {os.path.basename(img_path)}")
                else:
                    print(f"{Colors.FAIL}‚ùå Th·∫•t b·∫°i sinh ·∫£nh{Colors.ENDC}")
                    
            except Exception as e:
                print(f"{Colors.FAIL}‚ùå L·ªói sinh ·∫£nh: {e}{Colors.ENDC}")
        
        # X·ª≠ l√Ω sinh video (gi·ªØ nguy√™n logic c≈©)
        if generate_video:
            try:
                print(f"\n{Colors.BLUE}üé¨ B·∫Øt ƒë·∫ßu sinh video...{Colors.ENDC}")
                
                video_generator = FreepikVideoGenerator(headless=not show_browser)
                cookie_string = json.dumps(cookies) if cookies else None
                
                video_path = video_generator.generate_video(
                    prompt=prompt_data['video_prompt'],
                    duration=prompt_data.get('video_duration', '5s'),
                    ratio=prompt_data.get('video_ratio', '1:1'),
                    cookie_string=cookie_string
                )
                
                if video_path:
                    success_count += 1
                    print(f"{Colors.GREEN}‚úÖ ƒê√£ sinh video: {os.path.basename(video_path)}{Colors.ENDC}")
                else:
                    print(f"{Colors.FAIL}‚ùå Th·∫•t b·∫°i sinh video{Colors.ENDC}")
                    
            except Exception as e:
                print(f"{Colors.FAIL}‚ùå L·ªói sinh video: {e}{Colors.ENDC}")
        
        return success_count > 0
        
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå L·ªói x·ª≠ l√Ω AI prompt: {e}{Colors.ENDC}")
        return False

def create_manual_prompt(topic: str) -> Optional[Dict[str, Any]]:
    """T·∫°o prompt th·ªß c√¥ng khi Gemini API kh√¥ng ho·∫°t ƒë·ªông"""
    try:
        print(f"\n{Colors.BLUE}üõ†Ô∏è ƒêang t·∫°o prompt th·ªß c√¥ng cho: {topic}{Colors.ENDC}")
        
        # Template prompt c∆° b·∫£n d·ª±a tr√™n topic
        prompt_templates = {
            'm√®o': {
                'image': 'Cute orange cat sitting by the window, soft natural lighting, photorealistic, high quality, 4K',
                'video': 'Cat moving gracefully, gentle camera movement, warm lighting, cozy atmosphere'
            },
            'ch√≥': {
                'image': 'Adorable puppy playing in garden, natural lighting, photorealistic, high quality, 4K',
                'video': 'Puppy running and playing, dynamic camera movement, outdoor setting, cheerful mood'
            },
            'c·∫£nh': {
                'image': 'Beautiful landscape with mountains and sky, golden hour lighting, cinematic, high quality, 4K',
                'video': 'Slow camera pan across landscape, peaceful atmosphere, natural lighting'
            },
            'poster': {
                'image': 'Modern minimalist poster design, clean layout, professional typography, contemporary style',
                'video': 'Logo animation with smooth transitions, professional presentation, modern style'
            },
            'logo': {
                'image': 'Creative logo design, modern style, clean lines, professional appearance, vector art',
                'video': 'Logo reveal animation, smooth transitions, professional presentation'
            }
        }
        
        # T√¨m template ph√π h·ª£p
        selected_template = None
        topic_lower = topic.lower()
        
        for key, template in prompt_templates.items():
            if key in topic_lower:
                selected_template = template
                break
        
        # Fallback template n·∫øu kh√¥ng t√¨m th·∫•y
        if not selected_template:
            selected_template = {
                'image': f'High quality image of {topic}, professional photography, detailed, 4K resolution, natural lighting',
                'video': f'Cinematic video about {topic}, smooth camera movement, professional cinematography, high quality'
            }
        
        # T·∫°o prompt data
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        prompt_data = {
            'image_prompt': selected_template['image'],
            'video_prompt': selected_template['video'],
            'video_duration': '5s',
            'video_ratio': '1:1',
            'topic': topic,
            'prompt_id': f'manual_{timestamp}',
            'generated_at': datetime.now().isoformat(),
            'generated_by': 'manual_fallback'
        }
        
        # L∆∞u v√†o file
        os.makedirs('prompts', exist_ok=True)
        safe_topic = "".join(c for c in topic[:30] if c.isalnum() or c in (' ', '-', '_')).strip()
        safe_topic = safe_topic.replace(' ', '_')
        
        filename = f"manual_{timestamp}_{safe_topic}.json"
        file_path = os.path.join('prompts', filename)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(prompt_data, f, ensure_ascii=False, indent=2)
        
        prompt_data['file_path'] = file_path
        
        print(f"üíæ ƒê√£ l∆∞u prompt th·ªß c√¥ng: {file_path}")
        return prompt_data
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o prompt th·ªß c√¥ng: {e}")
        return None


@click.group()
def cli():
    """FAZZYTOOL - C√¥ng c·ª• t·ª± ƒë·ªông sinh ·∫£nh v√† video AI t·ª´ Freepik Pikaso"""
    print_banner()
    
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng
    if not validate_environment():
        sys.exit(1)


@cli.command()
@click.option('--file', '-f', type=str, help='ƒê∆∞·ªùng d·∫´n t·ªõi file prompt (.txt, .json, .docx)')
@click.option('--image/--no-image', default=True, help='Sinh ·∫£nh (m·∫∑c ƒë·ªãnh: True)')
@click.option('--video/--no-video', default=True, help='Sinh video (m·∫∑c ƒë·ªãnh: True)')
@click.option('--show-browser/--headless', default=False, help='Hi·ªÉn th·ªã tr√¨nh duy·ªát (m·∫∑c ƒë·ªãnh: False)')
def file(file, image, video, show_browser):
    """Sinh ·∫£nh/video t·ª´ prompt trong file"""
    if not file:
        print(f"{Colors.FAIL}Vui l√≤ng cung c·∫•p ƒë∆∞·ªùng d·∫´n file v·ªõi t√πy ch·ªçn --file{Colors.ENDC}")
        sys.exit(1)
        
    if not os.path.exists(file):
        print(f"{Colors.FAIL}Kh√¥ng t√¨m th·∫•y file: {file}{Colors.ENDC}")
        sys.exit(1)
        
    success = process_file_prompt(file, image, video, show_browser)
    if not success:
        sys.exit(1)


@cli.command()
@click.option('--topic', '-t', type=str, required=True, help='Ch·ªß ƒë·ªÅ ƒë·ªÉ sinh prompt (ti·∫øng Vi·ªát)')
@click.option('--image/--no-image', default=True, help='Sinh ·∫£nh (m·∫∑c ƒë·ªãnh: True)')
@click.option('--video/--no-video', default=True, help='Sinh video (m·∫∑c ƒë·ªãnh: True)')
@click.option('--show-browser/--headless', default=False, help='Hi·ªÉn th·ªã tr√¨nh duy·ªát (m·∫∑c ƒë·ªãnh: False)')
@click.option('--num-images', default=4, help='S·ªë l∆∞·ª£ng ·∫£nh sinh ra (m·∫∑c ƒë·ªãnh: 4)')
@click.option('--download-count', default=None, type=int, help='S·ªë l∆∞·ª£ng ·∫£nh t·∫£i v·ªÅ (m·∫∑c ƒë·ªãnh: t·∫•t c·∫£)')
def ai(topic, image, video, show_browser, num_images, download_count):
    """Sinh ·∫£nh/video t·ª´ ch·ªß ƒë·ªÅ b·∫±ng Gemini AI v·ªõi t√πy ch·ªçn n√¢ng cao"""
    if not topic:
        print(f"{Colors.FAIL}Vui l√≤ng cung c·∫•p ch·ªß ƒë·ªÅ v·ªõi t√πy ch·ªçn --topic{Colors.ENDC}")
        sys.exit(1)
    
    # C·∫≠p nh·∫≠t global config cho AI generation
    global AI_GENERATION_CONFIG
    AI_GENERATION_CONFIG = {
        'num_images': num_images,
        'download_count': download_count if download_count is not None else num_images
    }
        
    success = process_ai_prompt(topic, image, video, show_browser)
    if not success:
        sys.exit(1)


@cli.command()
@click.option('--topics', '-t', multiple=True, help='Danh s√°ch ch·ªß ƒë·ªÅ (c√≥ th·ªÉ l·∫∑p l·∫°i nhi·ªÅu l·∫ßn)')
@click.option('--file', '-f', type=str, help='File ch·ª©a danh s√°ch ch·ªß ƒë·ªÅ (m·ªói d√≤ng m·ªôt ch·ªß ƒë·ªÅ)')
@click.option('--start-index', default=1, help='S·ªë th·ª© t·ª± b·∫Øt ƒë·∫ßu ƒë√°nh s·ªë prompt')
def ai_batch(topics, file, start_index):
    """Sinh nhi·ªÅu prompt AI t·ª´ danh s√°ch ch·ªß ƒë·ªÅ v√† l∆∞u th√†nh file c√≥ th·ª© t·ª±"""
    
    topic_list = list(topics) if topics else []
    
    # ƒê·ªçc t·ª´ file n·∫øu c√≥
    if file:
        try:
            with open(file, 'r', encoding='utf-8') as f:
                file_topics = [line.strip() for line in f if line.strip()]
                topic_list.extend(file_topics)
        except Exception as e:
            print(f"{Colors.FAIL}‚ùå L·ªói ƒë·ªçc file {file}: {e}{Colors.ENDC}")
            return
    
    if not topic_list:
        print(f"{Colors.FAIL}Vui l√≤ng cung c·∫•p ch·ªß ƒë·ªÅ qua --topics ho·∫∑c --file{Colors.ENDC}")
        print("V√≠ d·ª•:")
        print("  python main.py ai-batch -t 'M√®o d·ªÖ th∆∞∆°ng' -t 'Ch√≥ nh·ªè' -t 'Hoa ƒë·∫πp'")
        print("  python main.py ai-batch -f topics.txt")
        return
    
    try:
        print(f"{Colors.BLUE}üöÄ B·∫Øt ƒë·∫ßu sinh {len(topic_list)} prompt AI...{Colors.ENDC}")
        
        gemini_generator = GeminiPromptGenerator(output_dir="prompts")
        results = gemini_generator.generate_batch_prompts(topic_list, start_index)
        
        # Th·ªëng k√™ k·∫øt qu·∫£
        successful = len([r for r in results if "error" not in r])
        failed = len([r for r in results if "error" in r])
        
        print(f"\n{Colors.GREEN}{Colors.BOLD}‚úÖ HO√ÄN TH√ÄNH BATCH AI GENERATION{Colors.ENDC}")
        print(f"{Colors.GREEN}Th√†nh c√¥ng: {successful}/{len(topic_list)}{Colors.ENDC}")
        print(f"{Colors.FAIL}Th·∫•t b·∫°i: {failed}/{len(topic_list)}{Colors.ENDC}")
        print(f"{Colors.BLUE}üìÅ T·∫•t c·∫£ file ƒë√£ l∆∞u trong th∆∞ m·ª•c: prompts/{Colors.ENDC}")
        
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå L·ªói batch AI generation: {e}{Colors.ENDC}")


@cli.command()
@click.option('--show-browser/--headless', default=False, help='Hi·ªÉn th·ªã tr√¨nh duy·ªát (m·∫∑c ƒë·ªãnh: False)')
@click.option('--dry-run', is_flag=True, help='Ch·ªâ xem th√¥ng tin batch m√† kh√¥ng th·ª±c thi')
def batch(show_browser, dry_run):
    """X·ª≠ l√Ω h√†ng lo·∫°t t·ª´ file template"""
    try:
        processor = BatchProcessor()
        batch_job = processor.create_batch_job()
        
        # Hi·ªÉn th·ªã t√≥m t·∫Øt batch
        is_valid = processor.print_batch_summary(batch_job)
        
        if not is_valid:
            print(f"\n{Colors.FAIL}‚ùå Batch job kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c√°c file template.{Colors.ENDC}")
            return
            
        if dry_run:
            print(f"\n{Colors.BLUE}üîç DRY RUN - Ch·ªâ xem th√¥ng tin, kh√¥ng th·ª±c thi{Colors.ENDC}")
            return
            
        # X√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng
        print(f"\n{Colors.WARNING}B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c x·ª≠ l√Ω batch n√†y? (y/N): {Colors.ENDC}", end="")
        confirm = input().strip().lower()
        
        if confirm not in ['y', 'yes', 'c√≥']:
            print(f"{Colors.BLUE}ƒê√£ h·ªßy batch job.{Colors.ENDC}")
            return
            
        # Th·ª±c thi batch theo workflow
        print(f"\n{Colors.GREEN}üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω batch...{Colors.ENDC}")
        results = []
        workflow = batch_job.get('workflow', 'unknown')
        
        if workflow == 'image_then_video':
            # Workflow: T·∫°o ·∫£nh tr∆∞·ªõc, sau ƒë√≥ d√πng ·∫£nh ƒë·ªÉ t·∫°o video
            print(f"{Colors.BLUE}üìã Workflow: T·∫°o ·∫£nh tr∆∞·ªõc ‚Üí D√πng ·∫£nh t·∫°o video{Colors.ENDC}")
            
            # B∆∞·ªõc 1: T·∫°o t·∫•t c·∫£ ·∫£nh
            created_images = []
            for i, prompt_item in enumerate(batch_job['image_prompts'], 1):
                print(f"\n{Colors.BLUE}[·∫¢nh {i}/{len(batch_job['image_prompts'])}] {prompt_item['content'][:50]}...{Colors.ENDC}")
                
                try:
                    image_path = process_single_image(prompt_item, show_browser, batch_job['cookies'])
                    if image_path:
                        created_images.append(image_path)
                        results.append({'prompt': prompt_item['content'], 'type': 'image', 'status': 'success', 'path': image_path})
                    else:
                        results.append({'prompt': prompt_item['content'], 'type': 'image', 'status': 'failed'})
                        
                    # Delay
                    if i < len(batch_job['image_prompts']):
                        delay = batch_job['config']['delay_between_requests']
                        print(f"{Colors.BLUE}Ch·ªù {delay}s...{Colors.ENDC}")
                        import time
                        time.sleep(delay)
                        
                except Exception as e:
                    print(f"{Colors.FAIL}L·ªói t·∫°o ·∫£nh {i}: {str(e)}{Colors.ENDC}")
                    results.append({'prompt': prompt_item['content'], 'type': 'image', 'status': 'failed', 'error': str(e)})
            
            # B∆∞·ªõc 2: D√πng ·∫£nh v·ª´a t·∫°o ƒë·ªÉ t·∫°o video
            for i, prompt_item in enumerate(batch_job['video_prompts'], 1):
                print(f"\n{Colors.BLUE}[Video {i}/{len(batch_job['video_prompts'])}] {prompt_item['content'][:50]}...{Colors.ENDC}")
                
                try:
                    if i <= len(created_images):
                        image_path = created_images[i-1]
                        video_path = process_single_video_from_image(prompt_item, image_path, show_browser, batch_job['cookies'])
                        if video_path:
                            results.append({'prompt': prompt_item['content'], 'type': 'video', 'status': 'success', 'path': video_path, 'source_image': image_path})
                        else:
                            results.append({'prompt': prompt_item['content'], 'type': 'video', 'status': 'failed'})
                    else:
                        print(f"{Colors.WARNING}Kh√¥ng c√≥ ·∫£nh t∆∞∆°ng ·ª©ng cho video prompt {i}{Colors.ENDC}")
                        results.append({'prompt': prompt_item['content'], 'type': 'video', 'status': 'failed', 'error': 'No corresponding image'})
                        
                    # Delay
                    if i < len(batch_job['video_prompts']):
                        delay = batch_job['config']['delay_between_requests']
                        print(f"{Colors.BLUE}Ch·ªù {delay}s...{Colors.ENDC}")
                        import time
                        time.sleep(delay)
                        
                except Exception as e:
                    print(f"{Colors.FAIL}L·ªói t·∫°o video {i}: {str(e)}{Colors.ENDC}")
                    results.append({'prompt': prompt_item['content'], 'type': 'video', 'status': 'failed', 'error': str(e)})
                    
        elif workflow == 'video_from_existing_images':
            # Workflow: D√πng ·∫£nh c√≥ s·∫µn ƒë·ªÉ t·∫°o video
            print(f"{Colors.BLUE}üìã Workflow: D√πng ·∫£nh c√≥ s·∫µn t·∫°o video{Colors.ENDC}")
            available_images = batch_job['available_images']
            
            for i, prompt_item in enumerate(batch_job['video_prompts'], 1):
                print(f"\n{Colors.BLUE}[Video {i}/{len(batch_job['video_prompts'])}] {prompt_item['content'][:50]}...{Colors.ENDC}")
                
                try:
                    if i <= len(available_images):
                        image_path = available_images[i-1]
                        print(f"üì∏ S·ª≠ d·ª•ng ·∫£nh: {os.path.basename(image_path)}")
                        video_path = process_single_video_from_image(prompt_item, image_path, show_browser, batch_job['cookies'])
                        if video_path:
                            results.append({'prompt': prompt_item['content'], 'type': 'video', 'status': 'success', 'path': video_path, 'source_image': image_path})
                        else:
                            results.append({'prompt': prompt_item['content'], 'type': 'video', 'status': 'failed'})
                    else:
                        print(f"{Colors.WARNING}Kh√¥ng c√≥ ·∫£nh t∆∞∆°ng ·ª©ng cho video prompt {i}{Colors.ENDC}")
                        results.append({'prompt': prompt_item['content'], 'type': 'video', 'status': 'failed', 'error': 'No corresponding image'})
                        
                    # Delay
                    if i < len(batch_job['video_prompts']):
                        delay = batch_job['config']['delay_between_requests']
                        print(f"{Colors.BLUE}Ch·ªù {delay}s...{Colors.ENDC}")
                        import time
                        time.sleep(delay)
                        
                except Exception as e:
                    print(f"{Colors.FAIL}L·ªói t·∫°o video {i}: {str(e)}{Colors.ENDC}")
                    results.append({'prompt': prompt_item['content'], 'type': 'video', 'status': 'failed', 'error': str(e)})
                    
        else:
            # Workflow c≈©: x·ª≠ l√Ω t·ª´ng prompt m·ªôt
            for i, prompt_item in enumerate(batch_job['prompts'], 1):
                print(f"\n{Colors.BLUE}[{i}/{batch_job['total_items']}] ƒêang x·ª≠ l√Ω prompt: {prompt_item['content'][:50]}...{Colors.ENDC}")
                
                try:
                    result = {'prompt': prompt_item['content'], 'status': 'processing'}
                    
                    # X·ª≠ l√Ω theo lo·∫°i prompt
                    if prompt_item.get('use_ai', False):
                        # S·ª≠ d·ª•ng AI ƒë·ªÉ sinh prompt chi ti·∫øt
                        success = process_ai_prompt(prompt_item['content'], True, False, show_browser)
                    else:
                        # S·ª≠ d·ª•ng prompt tr·ª±c ti·∫øp
                        temp_prompt_file = f"temp_prompt_{i}.json"
                        with open(temp_prompt_file, 'w', encoding='utf-8') as f:
                            json.dump({
                                'image_prompt': prompt_item['content'],
                                'video_prompt': prompt_item['content'],
                                'video_duration': '5s',
                                'video_ratio': '1:1'
                            }, f, ensure_ascii=False, indent=2)
                        
                        success = process_file_prompt(temp_prompt_file, True, False, show_browser)
                        
                        # X√≥a file t·∫°m
                        if os.path.exists(temp_prompt_file):
                            os.remove(temp_prompt_file)
                    
                    result['status'] = 'success' if success else 'failed'
                    results.append(result)
                    
                    # Delay gi·ªØa c√°c request
                    if i < batch_job['total_items']:
                        delay = batch_job['config']['delay_between_requests']
                        print(f"{Colors.BLUE}Ch·ªù {delay}s tr∆∞·ªõc khi x·ª≠ l√Ω ti·∫øp...{Colors.ENDC}")
                        import time
                        time.sleep(delay)
                        
                except Exception as e:
                    print(f"{Colors.FAIL}L·ªói x·ª≠ l√Ω prompt {i}: {str(e)}{Colors.ENDC}")
                    results.append({'prompt': prompt_item['content'], 'status': 'failed', 'error': str(e)})
        
        # L∆∞u b√°o c√°o
        processor.save_batch_report(results, batch_job)
        
        # T√≥m t·∫Øt k·∫øt qu·∫£
        success_count = len([r for r in results if r['status'] == 'success'])
        failed_count = len([r for r in results if r['status'] == 'failed'])
        
        print(f"\n{Colors.GREEN}{Colors.BOLD}‚úÖ BATCH HO√ÄN TH√ÄNH{Colors.ENDC}")
        print(f"{Colors.GREEN}Th√†nh c√¥ng: {success_count}/{len(results)}{Colors.ENDC}")
        print(f"{Colors.FAIL}Th·∫•t b·∫°i: {failed_count}/{len(results)}{Colors.ENDC}")
        
    except Exception as e:
        print(f"{Colors.FAIL}L·ªói batch processing: {str(e)}{Colors.ENDC}")
        if "--debug" in sys.argv:
            traceback.print_exc()


@cli.command()
def setup():
    """Thi·∫øt l·∫≠p file .env v√† c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt"""
    # T·∫°o file .env n·∫øu ch∆∞a t·ªìn t·∫°i
    env_file = os.path.join(os.getcwd(), ".env")
    if not os.path.exists(env_file):
        try:
            with open(env_file, "w", encoding="utf-8") as f:
                f.write("# Ch·ª©a API key c·ªßa Gemini v√† Cookie Freepik\n")
                f.write("GEMINI_API_KEY=your_gemini_api_key_here\n")
                f.write("FREEPIK_COOKIE=your_freepik_cookie_here\n")
                
            print(f"{Colors.GREEN}ƒê√£ t·∫°o file .env m·∫´u t·∫°i: {env_file}{Colors.ENDC}")
            print(f"{Colors.GREEN}Vui l√≤ng c·∫≠p nh·∫≠t API key v√† cookie trong file n√†y.{Colors.ENDC}")
        except Exception as e:
            print(f"{Colors.FAIL}L·ªói khi t·∫°o file .env: {str(e)}{Colors.ENDC}")
    else:
        print(f"{Colors.WARNING}File .env ƒë√£ t·ªìn t·∫°i t·∫°i: {env_file}{Colors.ENDC}")
    
    # T·∫°o th∆∞ m·ª•c output
    output_dir = os.path.join(os.getcwd(), "output")
    if not os.path.exists(output_dir):
        try:
            os.makedirs(output_dir)
            print(f"{Colors.GREEN}ƒê√£ t·∫°o th∆∞ m·ª•c output t·∫°i: {output_dir}{Colors.ENDC}")
        except Exception as e:
            print(f"{Colors.FAIL}L·ªói khi t·∫°o th∆∞ m·ª•c output: {str(e)}{Colors.ENDC}")
    else:
        print(f"{Colors.WARNING}Th∆∞ m·ª•c output ƒë√£ t·ªìn t·∫°i t·∫°i: {output_dir}{Colors.ENDC}")
    
    print(f"\n{Colors.BLUE}{Colors.BOLD}H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:{Colors.ENDC}")
    print(f"{Colors.GREEN}1. C·∫≠p nh·∫≠t file .env v·ªõi API key c·ªßa Gemini v√† cookie c·ªßa Freepik Premium{Colors.ENDC}")
    print(f"{Colors.GREEN}2. S·ª≠ d·ª•ng l·ªánh 'python main.py ai --topic \"ch·ªß ƒë·ªÅ c·ªßa b·∫°n\"' ƒë·ªÉ sinh n·ªôi dung b·∫±ng AI{Colors.ENDC}")
    print(f"{Colors.GREEN}3. Ho·∫∑c, s·ª≠ d·ª•ng l·ªánh 'python main.py file --file path/to/prompt.json' ƒë·ªÉ sinh t·ª´ file s·∫µn c√≥{Colors.ENDC}")
    print(f"{Colors.GREEN}4. K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c output/{Colors.ENDC}")


@cli.command()
def test():
    """Test c√°c t√≠nh nƒÉng c∆° b·∫£n c·ªßa FazzyTool"""
    print_banner()
    print(f"{Colors.BLUE}üß™ ƒêang test c√°c t√≠nh nƒÉng c∆° b·∫£n...{Colors.ENDC}")
    
    # Test 1: Ki·ªÉm tra file c·∫•u h√¨nh
    print(f"\n{Colors.BLUE}1. Ki·ªÉm tra file c·∫•u h√¨nh:{Colors.ENDC}")
    
    # Check .env
    load_dotenv()
    if os.path.exists('.env'):
        print(f"  ‚úÖ File .env: T·ªìn t·∫°i")
        gemini_key = os.getenv('GEMINI_API_KEY')
        freepik_cookie = os.getenv('FREEPIK_COOKIE')
        print(f"  {'‚úÖ' if gemini_key else '‚ùå'} GEMINI_API_KEY: {'C√≥' if gemini_key else 'Thi·∫øu'}")
        print(f"  {'‚úÖ' if freepik_cookie else '‚ùå'} FREEPIK_COOKIE: {'C√≥' if freepik_cookie else 'Thi·∫øu'}")
    else:
        print(f"  ‚ùå File .env: Kh√¥ng t·ªìn t·∫°i")
    
    # Check cookie template
    cookies = load_cookie_from_template()
    print(f"  {'‚úÖ' if cookies else '‚ùå'} Cookie template: {'OK' if cookies else 'L·ªói'}")
    
    # Test 2: Ki·ªÉm tra th∆∞ m·ª•c
    print(f"\n{Colors.BLUE}2. Ki·ªÉm tra th∆∞ m·ª•c:{Colors.ENDC}")
    for folder in ['prompts', 'output']:
        if os.path.exists(folder):
            print(f"  ‚úÖ Th∆∞ m·ª•c {folder}: T·ªìn t·∫°i")
        else:
            os.makedirs(folder, exist_ok=True)
            print(f"  üîß Th∆∞ m·ª•c {folder}: ƒê√£ t·∫°o")
    
    # Test 3: Test manual prompt generation
    print(f"\n{Colors.BLUE}3. Test t·∫°o prompt th·ªß c√¥ng:{Colors.ENDC}")
    try:
        test_prompt = create_manual_prompt("test m√®o d·ªÖ th∆∞∆°ng")
        if test_prompt:
            print(f"  ‚úÖ T·∫°o prompt th·ªß c√¥ng: Th√†nh c√¥ng")
            print(f"  üìÅ File: {test_prompt.get('file_path', 'N/A')}")
        else:
            print(f"  ‚ùå T·∫°o prompt th·ªß c√¥ng: Th·∫•t b·∫°i")
    except Exception as e:
        print(f"  ‚ùå L·ªói: {e}")
    
    # Test 4: Ki·ªÉm tra imports
    print(f"\n{Colors.BLUE}4. Ki·ªÉm tra modules:{Colors.ENDC}")
    modules_to_check = [
        ('selenium', 'Selenium WebDriver'),
        ('requests', 'HTTP Requests'),
        ('click', 'CLI Interface'),
        ('json', 'JSON Processing'),
        ('pathlib', 'Path Management')
    ]
    
    for module_name, description in modules_to_check:
        try:
            __import__(module_name)
            print(f"  ‚úÖ {description}: OK")
        except ImportError:
            print(f"  ‚ùå {description}: Thi·∫øu")
    
    print(f"\n{Colors.GREEN}üèÅ Test ho√†n th√†nh!{Colors.ENDC}")
    print(f"\n{Colors.BLUE}üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:{Colors.ENDC}")
    print(f"  ‚Ä¢ Test v·ªõi prompt c√≥ s·∫µn: python main.py file --file sample_prompts.json")
    print(f"  ‚Ä¢ T·∫°o prompt t·ª´ AI: python main.py ai --topic 'm√®o d·ªÖ th∆∞∆°ng'")
    print(f"  ‚Ä¢ X·ª≠ l√Ω batch: python main.py batch")
    print(f"  ‚Ä¢ Xem help: python main.py --help")


@cli.command()
def sessions():
    """Hi·ªÉn th·ªã th·ªëng k√™ c√°c session video ƒë√£ t·∫°o"""
    print(f"{Colors.BLUE}üìä TH·ªêNG K√ä VIDEO SESSIONS{Colors.ENDC}")
    
    try:
        from browser_video import FreepikVideoGenerator
        
        # T·∫°o generator ƒë·ªÉ access methods
        generator = FreepikVideoGenerator()
        generator.print_session_summary()
        
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå L·ªói khi l·∫•y th·ªëng k√™ sessions: {e}{Colors.ENDC}")


@cli.command()
@click.option('--prompt', '-p', default='test cookie v·ªõi prompt debug', help='Prompt ƒë·ªÉ test (m·∫∑c ƒë·ªãnh: test cookie v·ªõi prompt debug)')
@click.option('--show-browser/--headless', default=True, help='Hi·ªÉn th·ªã tr√¨nh duy·ªát ƒë·ªÉ debug (m·∫∑c ƒë·ªãnh: True)')
def debug_cookie(prompt, show_browser):
    """Debug chi ti·∫øt vi·ªác s·ª≠ d·ª•ng cookie Chrome ƒë·ªÉ nh·∫≠p prompt"""
    print(f"{Colors.BLUE}üîß B·∫Øt ƒë·∫ßu debug cookie Chrome...{Colors.ENDC}")
    
    try:
        # Load cookies
        cookies = load_cookie_from_template()
        if not cookies:
            print(f"{Colors.FAIL}‚ùå Kh√¥ng c√≥ cookie trong cookie_template.txt{Colors.ENDC}")
            print(f"{Colors.WARNING}Vui l√≤ng d√°n cookie v√†o file cookie_template.txt theo h∆∞·ªõng d·∫´n{Colors.ENDC}")
            return
        
        print(f"{Colors.GREEN}‚úÖ ƒê√£ load {len(cookies)} cookies t·ª´ template{Colors.ENDC}")
        
        # T·∫°o generator v·ªõi browser hi·ªÉn th·ªã ƒë·ªÉ debug
        from browser_image import FreepikImageGenerator
        generator = FreepikImageGenerator(headless=not show_browser, output_dir="output")
        
        # Debug b·∫±ng c√°ch ch·ªâ test ph·∫ßn nh·∫≠p prompt
        print(f"{Colors.BLUE}üß™ Test prompt: '{prompt}'{Colors.ENDC}")
        
        # S·ª≠ d·ª•ng playwright manual ƒë·ªÉ debug
        from playwright.sync_api import sync_playwright
        import time
        
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=not show_browser)
            context = browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            )
            page = context.new_page()
            
            try:
                # Set cookies
                context.add_cookies(cookies)
                print(f"{Colors.GREEN}üç™ ƒê√£ set cookies{Colors.ENDC}")
                
                # Th·ª≠ c√°c URL Freepik kh√°c nhau
                urls_to_try = [
                    "https://www.freepik.com/pikaso/ai-image-generator",
                    "https://www.freepik.com/pikaso",
                    "https://www.freepik.com/ai/image-generator",
                    "https://www.freepik.com/generate/image"
                ]
                
                current_url = None
                for url in urls_to_try:
                    try:
                        print(f"{Colors.BLUE}üåê Th·ª≠ URL: {url}...{Colors.ENDC}")
                        page.goto(url, wait_until="networkidle")
                        current_url = url
                        break
                    except Exception as e:
                        print(f"{Colors.WARNING}‚ö†Ô∏è URL {url} th·∫•t b·∫°i: {e}{Colors.ENDC}")
                        continue
                
                if not current_url:
                    print(f"{Colors.FAIL}‚ùå Kh√¥ng th·ªÉ v√†o b·∫•t k·ª≥ URL n√†o!{Colors.ENDC}")
                    return
                
                # Ch·ªù trang load
                time.sleep(3)
                final_url = page.url
                print(f"{Colors.GREEN}üìÑ Trang ƒë√£ load xong: {final_url}{Colors.ENDC}")
                
                # Debug: Show page title v√† m·ªôt s·ªë th√¥ng tin
                try:
                    title = page.title()
                    print(f"{Colors.BLUE}üè∑Ô∏è Ti√™u ƒë·ªÅ trang: {title}{Colors.ENDC}")
                    
                    # Check n·∫øu c√≥ th√¥ng b√°o ƒëƒÉng nh·∫≠p
                    login_indicators = ["Sign up", "Log in", "Login", "Register"]
                    for indicator in login_indicators:
                        if page.query_selector(f"text={indicator}"):
                            print(f"{Colors.WARNING}‚ö†Ô∏è Ph√°t hi·ªán: {indicator} - C√≥ th·ªÉ c·∫ßn ƒëƒÉng nh·∫≠p{Colors.ENDC}")
                    
                    # List t·∫•t c·∫£ input/textarea elements ƒë·ªÉ debug
                    all_inputs = page.query_selector_all("input, textarea, [contenteditable='true']")
                    print(f"{Colors.BLUE}üîç T√¨m th·∫•y {len(all_inputs)} input elements:{Colors.ENDC}")
                    
                    for i, input_el in enumerate(all_inputs[:10]):  # Ch·ªâ show 10 c√°i ƒë·∫ßu
                        try:
                            tag = input_el.evaluate("el => el.tagName")
                            placeholder = input_el.evaluate("el => el.placeholder || ''")
                            el_type = input_el.evaluate("el => el.type || ''")
                            visible = input_el.is_visible()
                            print(f"  {i+1}. {tag} type='{el_type}' placeholder='{placeholder}' visible={visible}")
                        except:
                            print(f"  {i+1}. [Error getting info]")
                            
                except Exception as e:
                    print(f"{Colors.WARNING}‚ö†Ô∏è L·ªói khi debug page info: {e}{Colors.ENDC}")
                
                print(f"{Colors.GREEN}üìÑ Ho√†n th√†nh debug page info{Colors.ENDC}")
                
                # T√¨m √¥ input v·ªõi nhi·ªÅu selector h∆°n
                print(f"{Colors.BLUE}üîç T√¨m √¥ nh·∫≠p prompt...{Colors.ENDC}")
                prompt_selectors = [
                    # Specific Freepik selectors
                    "textarea[placeholder*='Describe what you want to generate']",
                    "textarea[placeholder*='prompt']",
                    "textarea[placeholder*='describe']", 
                    "input[placeholder*='prompt']",
                    "input[placeholder*='describe']",
                    "input[placeholder*='Describe what you want']",
                    
                    # Data attributes
                    "[data-testid*='prompt']",
                    "[data-testid*='input']",
                    "[data-testid*='textarea']",
                    "[data-cy*='prompt']",
                    "[data-cy*='input']",
                    
                    # Class names
                    ".prompt-input",
                    ".input-prompt",
                    ".ai-prompt",
                    ".generate-input",
                    
                    # Generic selectors
                    "textarea",
                    "input[type='text']",
                    "[role='textbox']",
                    "[contenteditable='true']",
                    
                    # Form elements
                    "form textarea",
                    "form input[type='text']"
                ]
                
                found_selector = None
                for selector in prompt_selectors:
                    try:
                        element = page.query_selector(selector)
                        if element and element.is_visible():
                            print(f"{Colors.GREEN}‚úÖ T√¨m th·∫•y √¥ input: {selector}{Colors.ENDC}")
                            found_selector = selector
                            break
                    except:
                        continue
                
                if not found_selector:
                    print(f"{Colors.FAIL}‚ùå KH√îNG T√åM TH·∫§Y √î INPUT!{Colors.ENDC}")
                    page.screenshot(path="debug_no_input.png")
                    print(f"{Colors.WARNING}üì∏ Screenshot ƒë√£ l∆∞u: debug_no_input.png{Colors.ENDC}")
                    return
                
                # Test nh·∫≠p prompt b·∫±ng nhi·ªÅu c√°ch
                print(f"{Colors.BLUE}üìù Test nh·∫≠p prompt: '{prompt}'...{Colors.ENDC}")
                
                # Method 1: Click + Fill
                try:
                    page.click(found_selector, timeout=10000)
                    time.sleep(0.5)
                    page.fill(found_selector, prompt)
                    current_value = page.input_value(found_selector)
                    print(f"{Colors.GREEN}‚úÖ Method 1 th√†nh c√¥ng: '{current_value}'{Colors.ENDC}")
                except Exception as e:
                    print(f"{Colors.FAIL}‚ùå Method 1 th·∫•t b·∫°i: {e}{Colors.ENDC}")
                    
                    # Method 2: JavaScript force
                    try:
                        js_code = f"""
                        const element = document.querySelector('{found_selector}');
                        if (element) {{
                            element.focus();
                            element.value = '{prompt}';
                            element.dispatchEvent(new Event('input', {{ bubbles: true }}));
                            element.dispatchEvent(new Event('change', {{ bubbles: true }}));
                        }}
                        """
                        page.evaluate(js_code)
                        current_value = page.evaluate(f"document.querySelector('{found_selector}').value")
                        print(f"{Colors.GREEN}‚úÖ Method 2 (JS) th√†nh c√¥ng: '{current_value}'{Colors.ENDC}")
                    except Exception as e2:
                        print(f"{Colors.FAIL}‚ùå Method 2 (JS) c≈©ng th·∫•t b·∫°i: {e2}{Colors.ENDC}")
                
                # Screenshot sau khi nh·∫≠p
                page.screenshot(path="debug_after_input.png")
                print(f"{Colors.GREEN}üì∏ Screenshot sau khi nh·∫≠p: debug_after_input.png{Colors.ENDC}")
                
                # T√¨m n√∫t generate
                print(f"{Colors.BLUE}üîç T√¨m n√∫t Generate...{Colors.ENDC}")
                generate_selectors = [
                    "button[data-testid*='generate']",
                    "button:has-text('Generate')",
                    "button:has-text('Create')",
                    ".generate-btn",
                    "input[type='submit']"
                ]
                
                generate_found = False
                for selector in generate_selectors:
                    try:
                        element = page.query_selector(selector)
                        if element and element.is_visible():
                            print(f"{Colors.GREEN}‚úÖ T√¨m th·∫•y n√∫t generate: {selector}{Colors.ENDC}")
                            generate_found = True
                            
                            # Highlight n√∫t ƒë·ªÉ xem
                            page.evaluate(f"""
                                document.querySelector('{selector}').style.border = '3px solid red';
                            """)
                            break
                    except:
                        continue
                
                if not generate_found:
                    print(f"{Colors.FAIL}‚ùå KH√îNG T√åM TH·∫§Y N√öT GENERATE!{Colors.ENDC}")
                
                # Screenshot cu·ªëi
                page.screenshot(path="debug_final.png")
                print(f"{Colors.GREEN}üì∏ Screenshot cu·ªëi: debug_final.png{Colors.ENDC}")
                
                print(f"\n{Colors.BOLD}üéØ T·ªîNG K·∫æT DEBUG:{Colors.ENDC}")
                print(f"  ‚úÖ Cookies: {len(cookies)} cookies ƒë√£ set")
                print(f"  ‚úÖ Input field: {'T√¨m th·∫•y' if found_selector else 'KH√îNG T√åM TH·∫§Y'}")
                print(f"  ‚úÖ Generate button: {'T√¨m th·∫•y' if generate_found else 'KH√îNG T√åM TH·∫§Y'}")
                print(f"  üìÅ Screenshots: debug_*.png")
                
                if show_browser:
                    input(f"\n{Colors.WARNING}‚è∏Ô∏è Nh·∫•n Enter ƒë·ªÉ ƒë√≥ng browser...{Colors.ENDC}")
                
            except Exception as e:
                print(f"{Colors.FAIL}‚ùå L·ªói debug: {e}{Colors.ENDC}")
                page.screenshot(path="debug_error.png")
                
            finally:
                browser.close()
                
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå L·ªói t·ªïng qu√°t: {e}{Colors.ENDC}")
        traceback.print_exc()


# ========================================================================================
# COMMANDS RI√äNG BI·ªÜT CHO T·∫†O ·∫¢NH V√Ä VIDEO
# ========================================================================================

@cli.command()
@click.option('--file', '-f', type=str, help='ƒê∆∞·ªùng d·∫´n t·ªõi file prompt (.txt, .json, .docx)')
@click.option('--topic', '-t', type=str, help='Ch·ªß ƒë·ªÅ ƒë·ªÉ sinh prompt b·∫±ng AI (ti·∫øng Vi·ªát)')
@click.option('--prompt', '-p', type=str, help='Prompt tr·ª±c ti·∫øp (ti·∫øng Anh)')
@click.option('--num-images', default=4, help='S·ªë l∆∞·ª£ng ·∫£nh sinh ra (m·∫∑c ƒë·ªãnh: 4)')
@click.option('--download-count', default=None, type=int, help='S·ªë l∆∞·ª£ng ·∫£nh t·∫£i v·ªÅ (m·∫∑c ƒë·ªãnh: t·∫•t c·∫£)')
@click.option('--filename-prefix', type=str, help='Ti·ªÅn t·ªë t√™n file ·∫£nh')
@click.option('--show-browser/--headless', default=False, help='Hi·ªÉn th·ªã tr√¨nh duy·ªát (m·∫∑c ƒë·ªãnh: False)')
def image(file, topic, prompt, num_images, download_count, filename_prefix, show_browser):
    """CH·ªà T·∫†O ·∫¢NH - Sinh ·∫£nh t·ª´ prompt, file ho·∫∑c AI"""
    print(f"{Colors.GREEN}{Colors.BOLD}üé® CH·∫æ ƒê·ªò T·∫†O ·∫¢NH{Colors.ENDC}")
    
    # Ki·ªÉm tra input
    input_count = sum([bool(file), bool(topic), bool(prompt)])
    if input_count == 0:
        print(f"{Colors.FAIL}‚ùå Vui l√≤ng cung c·∫•p m·ªôt trong c√°c t√πy ch·ªçn:{Colors.ENDC}")
        print(f"   --file: ƒê∆∞·ªùng d·∫´n file prompt")
        print(f"   --topic: Ch·ªß ƒë·ªÅ ti·∫øng Vi·ªát (d√πng AI)")
        print(f"   --prompt: Prompt tr·ª±c ti·∫øp ti·∫øng Anh")
        sys.exit(1)
        
    if input_count > 1:
        print(f"{Colors.FAIL}‚ùå Ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt t√πy ch·ªçn input duy nh·∫•t{Colors.ENDC}")
        sys.exit(1)
    
    try:
        cookies = load_cookie_from_template()
        if not cookies:
            print(f"{Colors.FAIL}‚ùå Kh√¥ng th·ªÉ load cookie. Vui l√≤ng c·∫≠p nh·∫≠t cookie_template.txt{Colors.ENDC}")
            sys.exit(1)
        
        # Chu·∫©n b·ªã prompt data
        prompt_item = {
            'num_images': num_images,
            'download_count': download_count if download_count is not None else num_images,
            'filename_prefix': filename_prefix
        }
        
        if file:
            # T·ª´ file
            print(f"{Colors.BLUE}üìÅ ƒêang ƒë·ªçc prompt t·ª´ file: {file}{Colors.ENDC}")
            if not os.path.exists(file):
                print(f"{Colors.FAIL}‚ùå Kh√¥ng t√¨m th·∫•y file: {file}{Colors.ENDC}")
                sys.exit(1)
                
            loader = PromptLoader()
            file_data = loader.load_prompt(file)
            prompt_item['content'] = file_data.get('image_prompt', file_data.get('prompt', ''))
            
        elif topic:
            # T·ª´ AI
            print(f"{Colors.BLUE}ü§ñ ƒêang sinh prompt AI t·ª´ ch·ªß ƒë·ªÅ: {topic}{Colors.ENDC}")
            
            try:
                gemini_generator = GeminiPromptGenerator()
                ai_result = gemini_generator.generate_prompt(topic, save_to_file=True)
                prompt_item['content'] = ai_result['image_prompt']
                print(f"{Colors.GREEN}‚úÖ ƒê√£ sinh prompt AI th√†nh c√¥ng!{Colors.ENDC}")
                print(f"üìÅ File prompt: {ai_result.get('file_path', 'N/A')}")
                print(f"üé® Image prompt: {ai_result['image_prompt'][:100]}...")
            except Exception as e:
                print(f"{Colors.FAIL}‚ùå L·ªói sinh prompt AI: {e}{Colors.ENDC}")
                print(f"{Colors.WARNING}üîß ƒêang chuy·ªÉn sang ch·∫ø ƒë·ªô t·∫°o prompt th·ªß c√¥ng...{Colors.ENDC}")
                
                manual_prompt = create_manual_prompt(topic)
                if manual_prompt:
                    prompt_item['content'] = manual_prompt['image_prompt']
                else:
                    print(f"{Colors.FAIL}‚ùå Kh√¥ng th·ªÉ t·∫°o prompt th·ªß c√¥ng{Colors.ENDC}")
                    sys.exit(1)
                    
        else:
            # Prompt tr·ª±c ti·∫øp
            print(f"{Colors.BLUE}‚úçÔ∏è S·ª≠ d·ª•ng prompt tr·ª±c ti·∫øp{Colors.ENDC}")
            prompt_item['content'] = prompt
        
        if not prompt_item['content']:
            print(f"{Colors.FAIL}‚ùå Prompt r·ªóng{Colors.ENDC}")
            sys.exit(1)
        
        # T·∫°o ·∫£nh
        print(f"{Colors.GREEN}üé® B·∫Øt ƒë·∫ßu sinh ·∫£nh...{Colors.ENDC}")
        print(f"üé® Sinh {num_images} ·∫£nh, t·∫£i v·ªÅ {prompt_item['download_count']} ·∫£nh")
        print(f"üìù Prompt: {prompt_item['content'][:100]}...")
        
        downloaded_files = process_single_image_batch(prompt_item, show_browser, cookies)
        
        if downloaded_files:
            print(f"{Colors.GREEN}{Colors.BOLD}‚úÖ T·∫†O ·∫¢NH TH√ÄNH C√îNG!{Colors.ENDC}")
            print(f"{Colors.GREEN}üì∏ ƒê√£ t·∫£i v·ªÅ {len(downloaded_files)} ·∫£nh:{Colors.ENDC}")
            for i, file_path in enumerate(downloaded_files, 1):
                print(f"   {i}. {os.path.basename(file_path)}")
            print(f"{Colors.BLUE}üìÅ V·ªã tr√≠: th∆∞ m·ª•c output/{Colors.ENDC}")
        else:
            print(f"{Colors.FAIL}‚ùå Th·∫•t b·∫°i sinh ·∫£nh{Colors.ENDC}")
            sys.exit(1)
            
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå L·ªói: {str(e)}{Colors.ENDC}")
        sys.exit(1)


@cli.command()
@click.option('--file', '-f', type=str, help='ƒê∆∞·ªùng d·∫´n t·ªõi file prompt (.txt, .json, .docx)')
@click.option('--topic', '-t', type=str, help='Ch·ªß ƒë·ªÅ ƒë·ªÉ sinh prompt b·∫±ng AI (ti·∫øng Vi·ªát)')
@click.option('--prompt', '-p', type=str, help='Prompt tr·ª±c ti·∫øp (ti·∫øng Anh)')
@click.option('--image', '-i', type=str, help='ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë·ªÉ t·∫°o video (image-to-video)')
@click.option('--duration', default='5s', type=click.Choice(['5s', '10s']), help='Th·ªùi l∆∞·ª£ng video (m·∫∑c ƒë·ªãnh: 5s)')
@click.option('--ratio', default='16:9', type=click.Choice(['1:1', '16:9', '9:16']), help='T·ªâ l·ªá khung h√¨nh (m·∫∑c ƒë·ªãnh: 16:9)')
@click.option('--show-browser/--headless', default=False, help='Hi·ªÉn th·ªã tr√¨nh duy·ªát (m·∫∑c ƒë·ªãnh: False)')
def video(file, topic, prompt, image, duration, ratio, show_browser):
    """CH·ªà T·∫†O VIDEO - Sinh video t·ª´ prompt ho·∫∑c ·∫£nh"""
    print(f"{Colors.GREEN}{Colors.BOLD}üé¨ CH·∫æ ƒê·ªò T·∫†O VIDEO{Colors.ENDC}")
    
    # Ki·ªÉm tra input
    input_count = sum([bool(file), bool(topic), bool(prompt)])
    if input_count == 0 and not image:
        print(f"{Colors.FAIL}‚ùå Vui l√≤ng cung c·∫•p m·ªôt trong c√°c t√πy ch·ªçn:{Colors.ENDC}")
        print(f"   --file: ƒê∆∞·ªùng d·∫´n file prompt")
        print(f"   --topic: Ch·ªß ƒë·ªÅ ti·∫øng Vi·ªát (d√πng AI)")
        print(f"   --prompt: Prompt tr·ª±c ti·∫øp ti·∫øng Anh")
        print(f"   --image: ƒê∆∞·ªùng d·∫´n ·∫£nh (image-to-video)")
        sys.exit(1)
        
    if input_count > 1:
        print(f"{Colors.FAIL}‚ùå Ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt t√πy ch·ªçn input duy nh·∫•t{Colors.ENDC}")
        sys.exit(1)
    
    try:
        cookies = load_cookie_from_template()
        if not cookies:
            print(f"{Colors.FAIL}‚ùå Kh√¥ng th·ªÉ load cookie. Vui l√≤ng c·∫≠p nh·∫≠t cookie_template.txt{Colors.ENDC}")
            sys.exit(1)
        
        # Chu·∫©n b·ªã prompt data
        prompt_item = {
            'duration': duration,
            'ratio': ratio
        }
        
        # X·ª≠ l√Ω prompt
        if file:
            # T·ª´ file
            print(f"{Colors.BLUE}üìÅ ƒêang ƒë·ªçc prompt t·ª´ file: {file}{Colors.ENDC}")
            if not os.path.exists(file):
                print(f"{Colors.FAIL}‚ùå Kh√¥ng t√¨m th·∫•y file: {file}{Colors.ENDC}")
                sys.exit(1)
                
            loader = PromptLoader()
            file_data = loader.load_prompt(file)
            prompt_item['content'] = file_data.get('video_prompt', file_data.get('prompt', ''))
            
            # L·∫•y duration v√† ratio t·ª´ file n·∫øu c√≥
            prompt_item['duration'] = file_data.get('video_duration', duration)
            prompt_item['ratio'] = file_data.get('video_ratio', ratio)
            
        elif topic:
            # T·ª´ AI
            print(f"{Colors.BLUE}ü§ñ ƒêang sinh prompt AI t·ª´ ch·ªß ƒë·ªÅ: {topic}{Colors.ENDC}")
            
            try:
                gemini_generator = GeminiPromptGenerator()
                ai_result = gemini_generator.generate_prompt(topic, save_to_file=True)
                prompt_item['content'] = ai_result['video_prompt']
                prompt_item['duration'] = ai_result.get('video_duration', duration)
                prompt_item['ratio'] = ai_result.get('video_ratio', ratio)
                print(f"{Colors.GREEN}‚úÖ ƒê√£ sinh prompt AI th√†nh c√¥ng!{Colors.ENDC}")
                print(f"üìÅ File prompt: {ai_result.get('file_path', 'N/A')}")
                print(f"üé¨ Video prompt: {ai_result['video_prompt'][:100]}...")
            except Exception as e:
                print(f"{Colors.FAIL}‚ùå L·ªói sinh prompt AI: {e}{Colors.ENDC}")
                print(f"{Colors.WARNING}üîß ƒêang chuy·ªÉn sang ch·∫ø ƒë·ªô t·∫°o prompt th·ªß c√¥ng...{Colors.ENDC}")
                
                manual_prompt = create_manual_prompt(topic)
                if manual_prompt:
                    prompt_item['content'] = manual_prompt['video_prompt']
                else:
                    print(f"{Colors.FAIL}‚ùå Kh√¥ng th·ªÉ t·∫°o prompt th·ªß c√¥ng{Colors.ENDC}")
                    sys.exit(1)
                    
        elif prompt:
            # Prompt tr·ª±c ti·∫øp
            print(f"{Colors.BLUE}‚úçÔ∏è S·ª≠ d·ª•ng prompt tr·ª±c ti·∫øp{Colors.ENDC}")
            prompt_item['content'] = prompt
            
        elif image:
            # Image-to-video
            print(f"{Colors.BLUE}üñºÔ∏è T·∫°o video t·ª´ ·∫£nh: {image}{Colors.ENDC}")
            if not os.path.exists(image):
                print(f"{Colors.FAIL}‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh: {image}{Colors.ENDC}")
                sys.exit(1)
            
            # S·ª≠ d·ª•ng t√™n file l√†m prompt m·∫∑c ƒë·ªãnh
            prompt_item['content'] = f'Video from image: {os.path.basename(image)}'
        
        # T·∫°o video
        output_dir = create_output_dir()
        
        print(f"{Colors.GREEN}üé¨ B·∫Øt ƒë·∫ßu sinh video...{Colors.ENDC}")
        print(f"‚è±Ô∏è Th·ªùi l∆∞·ª£ng: {prompt_item['duration']}")
        print(f"üìê T·ªâ l·ªá: {prompt_item['ratio']}")
        
        if image:
            print(f"üñºÔ∏è T·ª´ ·∫£nh: {os.path.basename(image)}")
            video_path = process_single_video_from_image(prompt_item, image, show_browser, cookies)
        else:
            print(f"üìù Prompt: {prompt_item['content'][:100]}...")
            # T·∫°o video t·ª´ text prompt - fallback t·∫°o ·∫£nh tr∆∞·ªõc
            print(f"{Colors.WARNING}‚ö†Ô∏è Text-to-video: T·∫°o ·∫£nh tr∆∞·ªõc r·ªìi chuy·ªÉn th√†nh video...{Colors.ENDC}")
            
            # T·∫°o ·∫£nh tr∆∞·ªõc
            temp_prompt_item = {
                'content': prompt_item['content'],
                'num_images': 1,
                'download_count': 1,
                'filename_prefix': 'temp_for_video'
            }
            
            downloaded_files = process_single_image_batch(temp_prompt_item, show_browser, cookies)
            if downloaded_files:
                temp_image = downloaded_files[0]
                print(f"{Colors.GREEN}‚úÖ ƒê√£ t·∫°o ·∫£nh t·∫°m: {os.path.basename(temp_image)}{Colors.ENDC}")
                video_path = process_single_video_from_image(prompt_item, temp_image, show_browser, cookies)
            else:
                video_path = None
        
        if video_path:
            print(f"{Colors.GREEN}{Colors.BOLD}‚úÖ T·∫†O VIDEO TH√ÄNH C√îNG!{Colors.ENDC}")
            print(f"{Colors.GREEN}üé¨ Video: {os.path.basename(video_path)}{Colors.ENDC}")
            print(f"{Colors.BLUE}üìÅ V·ªã tr√≠: th∆∞ m·ª•c output/{Colors.ENDC}")
        else:
            print(f"{Colors.FAIL}‚ùå Th·∫•t b·∫°i sinh video{Colors.ENDC}")
            sys.exit(1)
            
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå L·ªói: {str(e)}{Colors.ENDC}")
        sys.exit(1)


@cli.command()
@click.option('--images-dir', type=str, default='output', help='Th∆∞ m·ª•c ch·ª©a ·∫£nh ƒë·ªÉ t·∫°o video (m·∫∑c ƒë·ªãnh: output)')
@click.option('--prompts-file', type=str, help='File ch·ª©a prompts cho video (m·ªói d√≤ng m·ªôt prompt)')
@click.option('--duration', default='5s', type=click.Choice(['5s', '10s']), help='Th·ªùi l∆∞·ª£ng video (m·∫∑c ƒë·ªãnh: 5s)')
@click.option('--ratio', default='16:9', type=click.Choice(['1:1', '16:9', '9:16']), help='T·ªâ l·ªá khung h√¨nh (m·∫∑c ƒë·ªãnh: 16:9)')
@click.option('--show-browser/--headless', default=False, help='Hi·ªÉn th·ªã tr√¨nh duy·ªát (m·∫∑c ƒë·ªãnh: False)')
def images_to_videos(images_dir, prompts_file, duration, ratio, show_browser):
    """T·∫†O VIDEO T·ª™ NHI·ªÄU ·∫¢NH - Chuy·ªÉn ƒë·ªïi h√†ng lo·∫°t ·∫£nh th√†nh video"""
    print(f"{Colors.GREEN}{Colors.BOLD}üé¨ CH·∫æ ƒê·ªò T·∫†O VIDEO T·ª™ ·∫¢NH{Colors.ENDC}")
    
    try:
        # Ki·ªÉm tra th∆∞ m·ª•c ·∫£nh
        if not os.path.exists(images_dir):
            print(f"{Colors.FAIL}‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ·∫£nh: {images_dir}{Colors.ENDC}")
            sys.exit(1)
        
        # T√¨m t·∫•t c·∫£ ·∫£nh
        image_extensions = ['.png', '.jpg', '.jpeg', '.webp']
        image_files = []
        for ext in image_extensions:
            image_files.extend(Path(images_dir).glob(f'*{ext}'))
            image_files.extend(Path(images_dir).glob(f'*{ext.upper()}'))
        
        if not image_files:
            print(f"{Colors.FAIL}‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c: {images_dir}{Colors.ENDC}")
            sys.exit(1)
        
        print(f"{Colors.BLUE}üì∏ T√¨m th·∫•y {len(image_files)} ·∫£nh{Colors.ENDC}")
        
        # Load prompts n·∫øu c√≥
        prompts = []
        if prompts_file and os.path.exists(prompts_file):
            print(f"{Colors.BLUE}üìù ƒêang ƒë·ªçc prompts t·ª´: {prompts_file}{Colors.ENDC}")
            with open(prompts_file, 'r', encoding='utf-8') as f:
                prompts = [line.strip() for line in f if line.strip()]
        
        # Load cookies
        cookies = load_cookie_from_template()
        if not cookies:
            print(f"{Colors.FAIL}‚ùå Kh√¥ng th·ªÉ load cookie. Vui l√≤ng c·∫≠p nh·∫≠t cookie_template.txt{Colors.ENDC}")
            sys.exit(1)
        
        # X·ª≠ l√Ω t·ª´ng ·∫£nh
        successful_videos = []
        failed_videos = []
        
        for i, image_path in enumerate(image_files, 1):
            print(f"{Colors.BLUE}\n[{i}/{len(image_files)}] ƒêang t·∫°o video t·ª´: {image_path.name}{Colors.ENDC}")
            
            try:
                # Chu·∫©n b·ªã prompt
                prompt_item = {
                    'duration': duration,
                    'ratio': ratio
                }
                
                if i <= len(prompts):
                    prompt_item['content'] = prompts[i-1]
                    print(f"üìù Prompt: {prompts[i-1][:50]}...")
                else:
                    prompt_item['content'] = f'Video animation from image: {image_path.stem}'
                    print(f"üìù Prompt t·ª± ƒë·ªông: {prompt_item['content']}")
                
                # T·∫°o video
                video_path = process_single_video_from_image(prompt_item, str(image_path), show_browser, cookies)
                
                if video_path:
                    successful_videos.append(video_path)
                    print(f"{Colors.GREEN}‚úÖ Th√†nh c√¥ng: {os.path.basename(video_path)}{Colors.ENDC}")
                else:
                    failed_videos.append(str(image_path))
                    print(f"{Colors.FAIL}‚ùå Th·∫•t b·∫°i: {image_path.name}{Colors.ENDC}")
                
                # Delay gi·ªØa c√°c request
                if i < len(image_files):
                    print(f"{Colors.BLUE}Ch·ªù 5s...{Colors.ENDC}")
                    import time
                    time.sleep(5)
                    
            except Exception as e:
                failed_videos.append(str(image_path))
                print(f"{Colors.FAIL}‚ùå L·ªói t·∫°o video t·ª´ {image_path.name}: {str(e)}{Colors.ENDC}")
        
        # T√≥m t·∫Øt k·∫øt qu·∫£
        print(f"{Colors.GREEN}{Colors.BOLD}\nüèÅ HO√ÄN TH√ÄNH T·∫†O VIDEO T·ª™ ·∫¢NH{Colors.ENDC}")
        print(f"{Colors.GREEN}‚úÖ Th√†nh c√¥ng: {len(successful_videos)}/{len(image_files)}{Colors.ENDC}")
        print(f"{Colors.FAIL}‚ùå Th·∫•t b·∫°i: {len(failed_videos)}/{len(image_files)}{Colors.ENDC}")
        
        if successful_videos:
            print(f"{Colors.BLUE}\nüìπ Video ƒë√£ t·∫°o:{Colors.ENDC}")
            for video in successful_videos:
                print(f"   {os.path.basename(video)}")
        
        if failed_videos:
            print(f"{Colors.FAIL}\nüí• ·∫¢nh t·∫°o video th·∫•t b·∫°i:{Colors.ENDC}")
            for img in failed_videos:
                print(f"   {os.path.basename(img)}")
                
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå L·ªói: {str(e)}{Colors.ENDC}")
        sys.exit(1)


if __name__ == "__main__":
    cli() 